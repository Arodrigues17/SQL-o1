[
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nHow many heads of the departments are older than 56 ?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM head WHERE age > 56;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nList the name, born state and age of the heads of departments ordered by age.\n\nQuestion hint:\nSELECT name , born_state , age FROM head\n\nThe incomplete SQL query:\nSELECT name , born_state , age FROM head\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , born_state , age FROM head ORDER BY age;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nList the creation year, name and budget of each department.\n\nQuestion hint:\nSELECT creation , name , budget_in_billions\n\nThe incomplete SQL query:\nSELECT creation , name , budget_in_billions\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT creation , name , budget_in_billions FROM department;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhat are the maximum and minimum budget of the departments?\n\nQuestion hint:\nSELECT max(budget_in_billions) , min(budget_in_billions)\n\nThe incomplete SQL query:\nSELECT max(budget_in_billions) , min(budget_in_billions)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(budget_in_billions) , min(budget_in_billions) FROM department;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhat is the average number of employees of the departments whose rank is between 10 and 15?\n\nQuestion hint:\nSELECT avg(num_employees)\n\nThe incomplete SQL query:\nSELECT avg(num_employees)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhat are the names of the heads who are born outside the California state?\n\nQuestion hint:\nSELECT name FROM head\n\nThe incomplete SQL query:\nSELECT name FROM head\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM head WHERE born_state != 'California';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhat are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?\n\nQuestion hint:\nSELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhat are the names of the states where at least 3 heads were born?\n\nQuestion hint:\nSELECT born_state FROM head\n\nThe incomplete SQL query:\nSELECT born_state FROM head\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT born_state FROM head GROUP BY born_state HAVING count(*) >= 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nIn which year were most departments established?\n\nQuestion hint:\nSELECT creation\n\nThe incomplete SQL query:\nSELECT creation\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nShow the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?\n\nQuestion hint:\nSELECT T1.name , T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id\n\nThe incomplete SQL query:\nSELECT T1.name , T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nHow many acting statuses are there?\n\nQuestion hint:\nSELECT count(DISTINCT temporary_acting)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT temporary_acting)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT temporary_acting) FROM management;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nHow many departments are led by heads who are not mentioned?\n\nQuestion hint:\nSELECT count(*) FROM department\n\nThe incomplete SQL query:\nSELECT count(*) FROM department\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhat are the distinct ages of the heads who are acting?\n\nQuestion hint:\nSELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nList the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.\n\nQuestion hint:\nSELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury'\n\nThe incomplete SQL query:\nSELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury'\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhich department has more than 1 head at a time? List the id, name and the number of heads.\n\nQuestion hint:\nSELECT T1.department_id , T1.name , count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id\n\nThe incomplete SQL query:\nSELECT T1.department_id , T1.name , count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.department_id , T1.name , count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING count(*) > 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhich head's name has the substring 'Ha'? List the id and name.\n\nQuestion hint:\nSELECT head_id , name FROM head\n\nThe incomplete SQL query:\nSELECT head_id , name FROM head\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT head_id , name FROM head WHERE name LIKE '%Ha%';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nHow many farms are there?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM farm;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nCount the number of farms.\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM farm;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nList the total number of horses on farms in ascending order.\n\nQuestion hint:\nSELECT Total_Horses\n\nThe incomplete SQL query:\nSELECT Total_Horses\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat is the total horses record for each farm, sorted ascending?\n\nQuestion hint:\nSELECT Total_Horses\n\nThe incomplete SQL query:\nSELECT Total_Horses\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the hosts of competitions whose theme is not \"Aliens\"?\n\nQuestion hint:\nSELECT Hosts\n\nThe incomplete SQL query:\nSELECT Hosts\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nReturn the hosts of competitions for which the theme is not Aliens?\n\nQuestion hint:\nSELECT Hosts\n\nThe incomplete SQL query:\nSELECT Hosts\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the themes of farm competitions sorted by year in ascending order?\n\nQuestion hint:\nSELECT Theme FROM farm_competition\n\nThe incomplete SQL query:\nSELECT Theme FROM farm_competition\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nReturn the themes of farm competitions, sorted by year ascending.\n\nQuestion hint:\nSELECT Theme FROM farm_competition\n\nThe incomplete SQL query:\nSELECT Theme FROM farm_competition\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat is the average number of working horses of farms with more than 5000 total number of horses?\n\nQuestion hint:\nSELECT avg(Working_Horses)\n\nThe incomplete SQL query:\nSELECT avg(Working_Horses)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses > 5000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nGive the average number of working horses on farms with more than 5000 total horses.\n\nQuestion hint:\nSELECT avg(Working_Horses)\n\nThe incomplete SQL query:\nSELECT avg(Working_Horses)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses > 5000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the maximum and minimum number of cows across all farms.\n\nQuestion hint:\nSELECT max(Cows) , min(Cows)\n\nThe incomplete SQL query:\nSELECT max(Cows) , min(Cows)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(Cows) , min(Cows) FROM farm;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nReturn the maximum and minimum number of cows across all farms.\n\nQuestion hint:\nSELECT max(Cows) , min(Cows)\n\nThe incomplete SQL query:\nSELECT max(Cows) , min(Cows)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(Cows) , min(Cows) FROM farm;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nHow many different statuses do cities have?\n\nQuestion hint:\nSELECT count(DISTINCT Status)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT Status)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT Status) FROM city;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nCount the number of different statuses.\n\nQuestion hint:\nSELECT count(DISTINCT Status)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT Status)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT Status) FROM city;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nList official names of cities in descending order of population.\n\nQuestion hint:\nSELECT Official_Name FROM city\n\nThe incomplete SQL query:\nSELECT Official_Name FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name FROM city ORDER BY Population DESC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the official names of cities, ordered descending by population?\n\nQuestion hint:\nSELECT Official_Name\n\nThe incomplete SQL query:\nSELECT Official_Name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name FROM city ORDER BY Population DESC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nList the official name and status of the city with the largest population.\n\nQuestion hint:\nSELECT Official_Name , Status FROM city ORDER BY Population DESC\n\nThe incomplete SQL query:\nSELECT Official_Name , Status FROM city ORDER BY Population DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat is the official name and status of the city with the most residents?\n\nQuestion hint:\nSELECT Official_Name , Status FROM city ORDER BY Population DESC\n\nThe incomplete SQL query:\nSELECT Official_Name , Status FROM city ORDER BY Population DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nShow the years and the official names of the host cities of competitions.\n\nQuestion hint:\nSELECT T2.Year , T1.Official_Name\n\nThe incomplete SQL query:\nSELECT T2.Year , T1.Official_Name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nGive the years and official names of the cities of each competition.\n\nQuestion hint:\nSELECT T2.Year , T1.Official_Name\n\nThe incomplete SQL query:\nSELECT T2.Year , T1.Official_Name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nShow the official names of the cities that have hosted more than one competition.\n\nQuestion hint:\nSELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID\n\nThe incomplete SQL query:\nSELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the official names of cities that have hosted more than one competition?\n\nQuestion hint:\nSELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nThe incomplete SQL query:\nSELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nShow the status of the city that has hosted the greatest number of competitions.\n\nQuestion hint:\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nThe incomplete SQL query:\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat is the status of the city that has hosted the most competitions?\n\nQuestion hint:\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nThe incomplete SQL query:\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nPlease show the themes of competitions with host cities having populations larger than 1000.\n\nQuestion hint:\nSELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nThe incomplete SQL query:\nSELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the themes of competitions that have corresponding host cities with more than 1000 residents?\n\nQuestion hint:\nSELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nThe incomplete SQL query:\nSELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nPlease show the different statuses of cities and the average population of cities with each status.\n\nQuestion hint:\nSELECT Status , avg(Population) FROM city\n\nThe incomplete SQL query:\nSELECT Status , avg(Population) FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status , avg(Population) FROM city GROUP BY Status;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the statuses and average populations of each city?\n\nQuestion hint:\nSELECT Status , avg(Population)\n\nThe incomplete SQL query:\nSELECT Status , avg(Population)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status , avg(Population) FROM city GROUP BY Status;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nPlease show the different statuses, ordered by the number of cities that have each.\n\nQuestion hint:\nSELECT Status\n\nThe incomplete SQL query:\nSELECT Status\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nReturn the different statuses of cities, ascending by frequency.\n\nQuestion hint:\nSELECT Status\n\nThe incomplete SQL query:\nSELECT Status\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nList the most common type of Status across cities.\n\nQuestion hint:\nSELECT Status\n\nThe incomplete SQL query:\nSELECT Status\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat is the most common status across all cities?\n\nQuestion hint:\nSELECT Status FROM city\n\nThe incomplete SQL query:\nSELECT Status FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nList the official names of cities that have not held any competition.\n\nQuestion hint:\nSELECT Official_Name FROM city\n\nThe incomplete SQL query:\nSELECT Official_Name FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the official names of cities that have not hosted a farm competition?\n\nQuestion hint:\nSELECT Official_Name FROM city\n\nThe incomplete SQL query:\nSELECT Official_Name FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nShow the status shared by cities with population bigger than 1500 and smaller than 500.\n\nQuestion hint:\nSELECT Status FROM city\n\nThe incomplete SQL query:\nSELECT Status FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhich statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?\n\nQuestion hint:\nSELECT Status FROM city\n\nThe incomplete SQL query:\nSELECT Status FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nFind the official names of cities with population bigger than 1500 or smaller than 500.\n\nQuestion hint:\nSELECT Official_Name FROM city\n\nThe incomplete SQL query:\nSELECT Official_Name FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the official names of cities that have population over 1500 or less than 500?\n\nQuestion hint:\nSELECT Official_Name FROM city\n\nThe incomplete SQL query:\nSELECT Official_Name FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nShow the census ranking of cities whose status are not \"Village\".\n\nQuestion hint:\nSELECT Census_Ranking\n\nThe incomplete SQL query:\nSELECT Census_Ranking\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Census_Ranking FROM city WHERE Status != \"Village\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the census rankings of cities that do not have the status \"Village\"?\n\nQuestion hint:\nSELECT Census_Ranking\n\nThe incomplete SQL query:\nSELECT Census_Ranking\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Census_Ranking FROM city WHERE Status != \"Village\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nwhich course has most number of registered students?\n\nQuestion hint:\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id\n\nThe incomplete SQL query:\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat is the name of the course with the most registered students?\n\nQuestion hint:\nSELECT T1.course_name\n\nThe incomplete SQL query:\nSELECT T1.course_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nwhat is id of students who registered some courses but the least number of courses in these students?\n\nQuestion hint:\nSELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*)\n\nThe incomplete SQL query:\nSELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of the students who registered for some courses but had the least number of courses for all students?\n\nQuestion hint:\nSELECT student_id FROM student_course_registrations\n\nThe incomplete SQL query:\nSELECT student_id FROM student_course_registrations\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nwhat are the first name and last name of all candidates?\n\nQuestion hint:\nSELECT T2.first_name , T2.last_name\n\nThe incomplete SQL query:\nSELECT T2.first_name , T2.last_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the first and last names of all the candidates?\n\nQuestion hint:\nSELECT T2.first_name , T2.last_name\n\nThe incomplete SQL query:\nSELECT T2.first_name , T2.last_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nList the id of students who never attends courses?\n\nQuestion hint:\nSELECT student_id\n\nThe incomplete SQL query:\nSELECT student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the  ids of every student who has never attended a course?\n\nQuestion hint:\nSELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id\n\nThe incomplete SQL query:\nSELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nList the id of students who attended some courses?\n\nQuestion hint:\nSELECT student_id\n\nThe incomplete SQL query:\nSELECT student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_attendance;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of all students who have attended at least one course?\n\nQuestion hint:\nSELECT student_id\n\nThe incomplete SQL query:\nSELECT student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_attendance;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of all students for courses and what are the names of those courses?\n\nQuestion hint:\nSELECT T1.student_id , T2.course_name\n\nThe incomplete SQL query:\nSELECT T1.student_id , T2.course_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.student_id , T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat is detail of the student who most recently registered course?\n\nQuestion hint:\nSELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC\n\nThe incomplete SQL query:\nSELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat details do we have on the students who registered for courses most recently?\n\nQuestion hint:\nSELECT T2.student_details\n\nThe incomplete SQL query:\nSELECT T2.student_details\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nHow many students attend course English?\n\nQuestion hint:\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id\n\nThe incomplete SQL query:\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nHow many students are attending English courses?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nHow many courses do the student whose id is 171 attend?\n\nQuestion hint:\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id\n\nThe incomplete SQL query:\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nHow many courses does the student with id 171 actually attend?\n\nQuestion hint:\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id\n\nThe incomplete SQL query:\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFind id of the candidate whose email is stanley.monahan@example.org?\n\nQuestion hint:\nSELECT T2.candidate_id\n\nThe incomplete SQL query:\nSELECT T2.candidate_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat is the id of the candidate whose email is stanley.monahan@example.org?\n\nQuestion hint:\nSELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id\n\nThe incomplete SQL query:\nSELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFind id of the candidate who most recently accessed the course?\n\nQuestion hint:\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC\n\nThe incomplete SQL query:\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat is the id of the candidate who most recently accessed the course?\n\nQuestion hint:\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC\n\nThe incomplete SQL query:\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat is detail of the student who registered the most number of courses?\n\nQuestion hint:\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC\n\nThe incomplete SQL query:\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the details of the student who registered for the most number of courses?\n\nQuestion hint:\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC\n\nThe incomplete SQL query:\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nList the id of students who registered some courses and the number of their registered courses?\n\nQuestion hint:\nSELECT T1.student_id , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id\n\nThe incomplete SQL query:\nSELECT T1.student_id , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.student_id , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFor every student who is registered for some course, how many courses are they registered for?\n\nQuestion hint:\nSELECT T1.student_id , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id\n\nThe incomplete SQL query:\nSELECT T1.student_id , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.student_id , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nHow many registed students do each course have? List course name and the number of their registered students?\n\nQuestion hint:\nSELECT T3.course_name , count(*)\n\nThe incomplete SQL query:\nSELECT T3.course_name , count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFor each course id, how many students are registered and what are the course names?\n\nQuestion hint:\nSELECT T3.course_name , count(*)\n\nThe incomplete SQL query:\nSELECT T3.course_name , count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFind id of candidates whose assessment code is \"Pass\"?\n\nQuestion hint:\nSELECT candidate_id FROM candidate_assessments\n\nThe incomplete SQL query:\nSELECT candidate_id FROM candidate_assessments\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of the candidates that have an outcome code of Pass?\n\nQuestion hint:\nSELECT candidate_id\n\nThe incomplete SQL query:\nSELECT candidate_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFind the cell mobile number of the candidates whose assessment code is \"Fail\"?\n\nQuestion hint:\nSELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id\n\nThe incomplete SQL query:\nSELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?\n\nQuestion hint:\nSELECT T3.cell_mobile_number\n\nThe incomplete SQL query:\nSELECT T3.cell_mobile_number\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the id of students who registered course 301?\n\nQuestion hint:\nSELECT student_id FROM student_course_attendance\n\nThe incomplete SQL query:\nSELECT student_id FROM student_course_attendance\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_attendance WHERE course_id = 301;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of the students who registered for course 301?\n\nQuestion hint:\nSELECT student_id FROM student_course_attendance\n\nThe incomplete SQL query:\nSELECT student_id FROM student_course_attendance\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_attendance WHERE course_id = 301;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat is the id of the student who most recently registered course 301?\n\nQuestion hint:\nSELECT student_id\n\nThe incomplete SQL query:\nSELECT student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of the students who registered for course 301 most recently?\n\nQuestion hint:\nSELECT student_id FROM student_course_attendance\n\nThe incomplete SQL query:\nSELECT student_id FROM student_course_attendance\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFind distinct cities of addresses of people?\n\nQuestion hint:\nSELECT DISTINCT T1.city\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the different cities where people live?\n\nQuestion hint:\nSELECT DISTINCT T1.city\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFind distinct cities of address of students?\n\nQuestion hint:\nSELECT DISTINCT T1.city\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the different cities where students live?\n\nQuestion hint:\nSELECT DISTINCT T1.city\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nList the names of courses in alphabetical order?\n\nQuestion hint:\nSELECT course_name\n\nThe incomplete SQL query:\nSELECT course_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT course_name FROM courses ORDER BY course_name;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the names of the courses in alphabetical order?\n\nQuestion hint:\nSELECT course_name\n\nThe incomplete SQL query:\nSELECT course_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT course_name FROM courses ORDER BY course_name;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nList the first names of people in alphabetical order?\n\nQuestion hint:\nSELECT first_name FROM people\n\nThe incomplete SQL query:\nSELECT first_name FROM people\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name FROM people ORDER BY first_name;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the first names of the people in alphabetical order?\n\nQuestion hint:\nSELECT first_name FROM people\n\nThe incomplete SQL query:\nSELECT first_name FROM people\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name FROM people ORDER BY first_name;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the id of students who registered courses or attended courses?\n\nQuestion hint:\nSELECT student_id FROM student_course_registrations UNION\n\nThe incomplete SQL query:\nSELECT student_id FROM student_course_registrations UNION\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of the students who either registered or attended a course?\n\nQuestion hint:\nSELECT student_id FROM student_course_registrations\n\nThe incomplete SQL query:\nSELECT student_id FROM student_course_registrations\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFind the id of courses which are registered or attended by student whose id is 121?\n\nQuestion hint:\nSELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id\n\nThe incomplete SQL query:\nSELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of the courses that are registered or attended by the student whose id is 121?\n\nQuestion hint:\nSELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance\n\nThe incomplete SQL query:\nSELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are all info of students who registered courses but not attended courses?\n\nQuestion hint:\nSELECT *\n\nThe incomplete SQL query:\nSELECT *\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are all details of the students who registered but did not attend any course?\n\nQuestion hint:\nSELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id\n\nThe incomplete SQL query:\nSELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nList the id of students who registered course statistics in the order of registration date.\n\nQuestion hint:\nSELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id\n\nThe incomplete SQL query:\nSELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of the students who registered course statistics by order of registration date?\n\nQuestion hint:\nSELECT T2.student_id\n\nThe incomplete SQL query:\nSELECT T2.student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nList the id of students who attended  statistics courses in the order of attendance date.\n\nQuestion hint:\nSELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id\n\nThe incomplete SQL query:\nSELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of the students who attended courses in the statistics department in order of attendance date.\n\nQuestion hint:\nSELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\"\n\nThe incomplete SQL query:\nSELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\"\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nGive me the dates when the max temperature was higher than 85.\n\nQuestion hint:\nSELECT date\n\nThe incomplete SQL query:\nSELECT date\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date FROM weather WHERE max_temperature_f > 85;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the dates with a maximum temperature higher than 85?\n\nQuestion hint:\nSELECT date\n\nThe incomplete SQL query:\nSELECT date\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date FROM weather WHERE max_temperature_f > 85;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the names of stations that have latitude lower than 37.5?\n\nQuestion hint:\nSELECT name FROM station\n\nThe incomplete SQL query:\nSELECT name FROM station\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM station WHERE lat < 37.5;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the names of all stations with a latitude smaller than 37.5?\n\nQuestion hint:\nSELECT name FROM station\n\nThe incomplete SQL query:\nSELECT name FROM station\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM station WHERE lat < 37.5;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFor each city, return the highest latitude among its stations.\n\nQuestion hint:\nSELECT city , max(lat) FROM station\n\nThe incomplete SQL query:\nSELECT city , max(lat) FROM station\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT city , max(lat) FROM station GROUP BY city;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFor each city, what is the highest latitude for its stations?\n\nQuestion hint:\nSELECT city , max(lat) FROM station\n\nThe incomplete SQL query:\nSELECT city , max(lat) FROM station\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT city , max(lat) FROM station GROUP BY city;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nGive me the start station and end station for the trips with the three oldest id.\n\nQuestion hint:\nSELECT start_station_name , end_station_name\n\nThe incomplete SQL query:\nSELECT start_station_name , end_station_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the station station and end station for the trips with the three smallest ids?\n\nQuestion hint:\nSELECT start_station_name , end_station_name FROM trip ORDER BY id\n\nThe incomplete SQL query:\nSELECT start_station_name , end_station_name FROM trip ORDER BY id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT start_station_name , end_station_name FROM trip ORDER BY id LIMIT 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the average latitude and longitude of stations located in San Jose city?\n\nQuestion hint:\nSELECT avg(lat) , avg(long)\n\nThe incomplete SQL query:\nSELECT avg(lat) , avg(long)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(lat) , avg(long) FROM station WHERE city = \"San Jose\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the average latitude and longitude in San Jose?\n\nQuestion hint:\nSELECT avg(lat) , avg(long)\n\nThe incomplete SQL query:\nSELECT avg(lat) , avg(long)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(lat) , avg(long) FROM station WHERE city = \"San Jose\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the id of the trip that has the shortest duration?\n\nQuestion hint:\nSELECT id FROM trip ORDER BY duration\n\nThe incomplete SQL query:\nSELECT id FROM trip ORDER BY duration\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id FROM trip ORDER BY duration LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the id of the shortest trip?\n\nQuestion hint:\nSELECT id FROM trip\n\nThe incomplete SQL query:\nSELECT id FROM trip\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id FROM trip ORDER BY duration LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the total and maximum duration of trips with bike id 636?\n\nQuestion hint:\nSELECT sum(duration) , max(duration) FROM trip\n\nThe incomplete SQL query:\nSELECT sum(duration) , max(duration) FROM trip\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(duration) , max(duration) FROM trip WHERE bike_id = 636;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the total and maximum duration for all trips with the bike id 636?\n\nQuestion hint:\nSELECT sum(duration) , max(duration)\n\nThe incomplete SQL query:\nSELECT sum(duration) , max(duration)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT sum(duration) , max(duration) FROM trip WHERE bike_id = 636;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFor each zip code, return the average mean temperature of August there.\n\nQuestion hint:\nSELECT zip_code , avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\"\n\nThe incomplete SQL query:\nSELECT zip_code , avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\"\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT zip_code , avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFor each zip code, what is the average mean temperature for all dates that start with '8'?\n\nQuestion hint:\nSELECT zip_code , avg(mean_temperature_f) FROM weather\n\nThe incomplete SQL query:\nSELECT zip_code , avg(mean_temperature_f) FROM weather\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT zip_code , avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFrom the trip record, find the number of unique bikes.\n\nQuestion hint:\nSELECT count(DISTINCT bike_id)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT bike_id)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT bike_id) FROM trip;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nHow many different bike ids are there?\n\nQuestion hint:\nSELECT count(DISTINCT bike_id)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT bike_id)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT bike_id) FROM trip;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the number of distinct cities the stations are located at?\n\nQuestion hint:\nSELECT count(DISTINCT city)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT city)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT city) FROM station;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nHow many different cities have these stations?\n\nQuestion hint:\nSELECT count(DISTINCT city)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT city)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT city) FROM station;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nHow many stations does Mountain View city has?\n\nQuestion hint:\nSELECT COUNT(*) FROM station\n\nThe incomplete SQL query:\nSELECT COUNT(*) FROM station\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(*) FROM station WHERE city = \"Mountain View\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nHow many stations are in Mountain View?\n\nQuestion hint:\nSELECT COUNT(*) FROM station\n\nThe incomplete SQL query:\nSELECT COUNT(*) FROM station\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(*) FROM station WHERE city = \"Mountain View\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nReturn the unique name for stations that have ever had 7 bikes available.\n\nQuestion hint:\nSELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the different names for each station that has ever had 7 bikes available?\n\nQuestion hint:\nSELECT DISTINCT T1.name\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhich start station had the most trips starting from August? Give me the name and id of the station.\n\nQuestion hint:\nSELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\"\n\nThe incomplete SQL query:\nSELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\"\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the start station's name and id for the one that had the most start trips in August?\n\nQuestion hint:\nSELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC\n\nThe incomplete SQL query:\nSELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhich bike traveled the most often in zip code 94002?\n\nQuestion hint:\nSELECT bike_id FROM trip\n\nThe incomplete SQL query:\nSELECT bike_id FROM trip\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the id of the bike that traveled the most in 94002?\n\nQuestion hint:\nSELECT bike_id FROM trip WHERE zip_code = 94002\n\nThe incomplete SQL query:\nSELECT bike_id FROM trip WHERE zip_code = 94002\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nHow many days had both mean humidity above 50 and mean visibility above 8?\n\nQuestion hint:\nSELECT COUNT(*) FROM weather\n\nThe incomplete SQL query:\nSELECT COUNT(*) FROM weather\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the number of days that had an average humity above 50 and an average visibility above 8?\n\nQuestion hint:\nSELECT COUNT(*)\n\nThe incomplete SQL query:\nSELECT COUNT(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the latitude, longitude, city of the station from which the shortest trip started?\n\nQuestion hint:\nSELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration\n\nThe incomplete SQL query:\nSELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the latitude, longitude, and city of the station from which the trip with smallest duration started?\n\nQuestion hint:\nSELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration\n\nThe incomplete SQL query:\nSELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the ids of stations that are located in San Francisco and have average bike availability above 10.\n\nQuestion hint:\nSELECT id FROM station WHERE city = \"San Francisco\" INTERSECT\n\nThe incomplete SQL query:\nSELECT id FROM station WHERE city = \"San Francisco\" INTERSECT\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the ids of the stations in San Francisco that normally have more than 10 bikes available?\n\nQuestion hint:\nSELECT id FROM station WHERE city = \"San Francisco\"\n\nThe incomplete SQL query:\nSELECT id FROM station WHERE city = \"San Francisco\"\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id FROM station WHERE city = \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available) > 10;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the names and ids of stations that had more than 14 bikes available on average or were installed in December?\n\nQuestion hint:\nSELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available) > 14 UNION SELECT name , id FROM station\n\nThe incomplete SQL query:\nSELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available) > 14 UNION SELECT name , id FROM station\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available) > 14 UNION SELECT name , id FROM station WHERE installation_date LIKE \"12/%\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?\n\nQuestion hint:\nSELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id\n\nThe incomplete SQL query:\nSELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available) > 14 UNION SELECT name , id FROM station WHERE installation_date LIKE \"12/%\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the 3 most common cloud cover rates in the region of zip code 94107?\n\nQuestion hint:\nSELECT cloud_cover FROM weather\n\nThe incomplete SQL query:\nSELECT cloud_cover FROM weather\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the 3 most common cloud covers in the zip code of 94107?\n\nQuestion hint:\nSELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover\n\nThe incomplete SQL query:\nSELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the zip code in which the average mean sea level pressure is the lowest?\n\nQuestion hint:\nSELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches)\n\nThe incomplete SQL query:\nSELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the zip code that has the lowest average mean sea level pressure?\n\nQuestion hint:\nSELECT zip_code FROM weather GROUP BY zip_code\n\nThe incomplete SQL query:\nSELECT zip_code FROM weather GROUP BY zip_code\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the average bike availability in stations that are not located in Palo Alto?\n\nQuestion hint:\nSELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id\n\nThe incomplete SQL query:\nSELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = \"Palo Alto\");",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the average bike availablility for stations not in Palo Alto?\n\nQuestion hint:\nSELECT avg(bikes_available) FROM status WHERE station_id NOT IN (\n\nThe incomplete SQL query:\nSELECT avg(bikes_available) FROM status WHERE station_id NOT IN (\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city = \"Palo Alto\");",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the average longitude of stations that never had bike availability more than 10?\n\nQuestion hint:\nSELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id\n\nThe incomplete SQL query:\nSELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available) > 10);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the mean longitude for all stations that have never had more than 10 bikes available?\n\nQuestion hint:\nSELECT avg(long)\n\nThe incomplete SQL query:\nSELECT avg(long)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available) > 10);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhen and in what zip code did max temperature reach 80?\n\nQuestion hint:\nSELECT date , zip_code\n\nThe incomplete SQL query:\nSELECT date , zip_code\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date , zip_code FROM weather WHERE max_temperature_f >= 80;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?\n\nQuestion hint:\nSELECT date , zip_code FROM weather\n\nThe incomplete SQL query:\nSELECT date , zip_code FROM weather\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date , zip_code FROM weather WHERE max_temperature_f >= 80;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nGive me ids for all the trip that took place in a zip code area with average mean temperature above 60.\n\nQuestion hint:\nSELECT T1.id\n\nThe incomplete SQL query:\nSELECT T1.id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f) > 60;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFor each zip code, find the ids of all trips that have a higher average mean temperature above 60?\n\nQuestion hint:\nSELECT T1.id\n\nThe incomplete SQL query:\nSELECT T1.id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f) > 60;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFor each zip code, return how many times max wind speed reached 25?\n\nQuestion hint:\nSELECT zip_code , count(*)\n\nThe incomplete SQL query:\nSELECT zip_code , count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFor each zip code, how many times has the maximum wind speed reached 25 mph?\n\nQuestion hint:\nSELECT zip_code , count(*) FROM weather\n\nThe incomplete SQL query:\nSELECT zip_code , count(*) FROM weather\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nOn which day and in which zip code was the min dew point lower than any day in zip code 94107?\n\nQuestion hint:\nSELECT date , zip_code FROM weather\n\nThe incomplete SQL query:\nSELECT date , zip_code FROM weather\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date , zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhich days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?\n\nQuestion hint:\nSELECT date , zip_code FROM weather WHERE min_dew_point_f < (\n\nThe incomplete SQL query:\nSELECT date , zip_code FROM weather WHERE min_dew_point_f < (\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date , zip_code FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFor each trip, return its ending station's installation date.\n\nQuestion hint:\nSELECT T1.id , T2.installation_date\n\nThe incomplete SQL query:\nSELECT T1.id , T2.installation_date\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.id , T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the installation date for each ending station on all the trips?\n\nQuestion hint:\nSELECT T1.id , T2.installation_date\n\nThe incomplete SQL query:\nSELECT T1.id , T2.installation_date\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.id , T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhich trip started from the station with the largest dock count? Give me the trip id.\n\nQuestion hint:\nSELECT T1.id\n\nThe incomplete SQL query:\nSELECT T1.id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the id of the trip that started from the station with the highest dock count?\n\nQuestion hint:\nSELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id\n\nThe incomplete SQL query:\nSELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nCount the number of trips that did not end in San Francisco city.\n\nQuestion hint:\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id\n\nThe incomplete SQL query:\nSELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != \"San Francisco\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nHow many trips did not end in San Francisco?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city != \"San Francisco\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nIn zip code 94107, on which day neither Fog nor Rain was not observed?\n\nQuestion hint:\nSELECT date\n\nThe incomplete SQL query:\nSELECT date\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nOn which day has it neither been foggy nor rained in the zip code of 94107?\n\nQuestion hint:\nSELECT date\n\nThe incomplete SQL query:\nSELECT date\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the ids of stations that have latitude above 37.4 and never had bike availability below 7?\n\nQuestion hint:\nSELECT id\n\nThe incomplete SQL query:\nSELECT id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available) < 7;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?\n\nQuestion hint:\nSELECT id\n\nThe incomplete SQL query:\nSELECT id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available) < 7;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are names of stations that have average bike availability above 10 and are not located in San Jose city?\n\nQuestion hint:\nSELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT\n\nThe incomplete SQL query:\nSELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the names of all stations that have more than 10 bikes available and are not located in San Jose?\n\nQuestion hint:\nSELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id\n\nThe incomplete SQL query:\nSELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = \"San Jose\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the name, latitude, and city of the station with the lowest latitude?\n\nQuestion hint:\nSELECT name , lat , city FROM station\n\nThe incomplete SQL query:\nSELECT name , lat , city FROM station\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , lat , city FROM station ORDER BY lat LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the name, latitude, and city of the station that is located the furthest South?\n\nQuestion hint:\nSELECT name , lat , city\n\nThe incomplete SQL query:\nSELECT name , lat , city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , lat , city FROM station ORDER BY lat LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?\n\nQuestion hint:\nSELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC\n\nThe incomplete SQL query:\nSELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?\n\nQuestion hint:\nSELECT date , mean_temperature_f , mean_humidity\n\nThe incomplete SQL query:\nSELECT date , mean_temperature_f , mean_humidity\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date , mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nList the name and the number of stations for all the cities that have at least 15 stations.\n\nQuestion hint:\nSELECT city , COUNT(*) FROM station\n\nThe incomplete SQL query:\nSELECT city , COUNT(*) FROM station\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT city , COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the name of every city that has at least 15 stations and how many stations does it have?\n\nQuestion hint:\nSELECT city , COUNT(*) FROM station GROUP BY city\n\nThe incomplete SQL query:\nSELECT city , COUNT(*) FROM station GROUP BY city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT city , COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFind the ids and names of stations from which at least 200 trips started.\n\nQuestion hint:\nSELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name\n\nThe incomplete SQL query:\nSELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the ids and names of all start stations that were the beginning of at least 200 trips?\n\nQuestion hint:\nSELECT start_station_id , start_station_name FROM trip\n\nThe incomplete SQL query:\nSELECT start_station_id , start_station_name FROM trip\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFind the zip code in which the average mean visibility is lower than 10.\n\nQuestion hint:\nSELECT zip_code FROM weather\n\nThe incomplete SQL query:\nSELECT zip_code FROM weather\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles) < 10;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFor each zip code, select all those that have an average mean visiblity below 10.\n\nQuestion hint:\nSELECT zip_code FROM weather GROUP BY zip_code\n\nThe incomplete SQL query:\nSELECT zip_code FROM weather GROUP BY zip_code\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles) < 10;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nList all the cities in a decreasing order of each city's stations' highest latitude.\n\nQuestion hint:\nSELECT city\n\nThe incomplete SQL query:\nSELECT city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFor each city, list their names in decreasing order by their highest station latitude.\n\nQuestion hint:\nSELECT city FROM station\n\nThe incomplete SQL query:\nSELECT city FROM station\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.\n\nQuestion hint:\nSELECT date , cloud_cover\n\nThe incomplete SQL query:\nSELECT date , cloud_cover\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date , cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the dates that have the 5 highest cloud cover rates and what are the rates?\n\nQuestion hint:\nSELECT date , cloud_cover\n\nThe incomplete SQL query:\nSELECT date , cloud_cover\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date , cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the ids and durations of the trips with the top 3 durations?\n\nQuestion hint:\nSELECT id , duration FROM trip\n\nThe incomplete SQL query:\nSELECT id , duration FROM trip\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the ids of the trips that lasted the longest and how long did they last?\n\nQuestion hint:\nSELECT id , duration FROM trip ORDER BY duration DESC\n\nThe incomplete SQL query:\nSELECT id , duration FROM trip ORDER BY duration DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFor each station, return its longitude and the average duration of trips that started from the station.\n\nQuestion hint:\nSELECT T1.name , T1.long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id\n\nThe incomplete SQL query:\nSELECT T1.name , T1.long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , T1.long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFor each start station id, what is its name, longitude and average duration of trips started there?\n\nQuestion hint:\nSELECT T1.name , T1.long , avg(T2.duration)\n\nThe incomplete SQL query:\nSELECT T1.name , T1.long , avg(T2.duration)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , T1.long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFor each station, find its latitude and the minimum duration of trips that ended at the station.\n\nQuestion hint:\nSELECT T1.name , T1.lat , min(T2.duration)\n\nThe incomplete SQL query:\nSELECT T1.name , T1.lat , min(T2.duration)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , T1.lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFor each end station id, what is its name, latitude, and minimum duration for trips ended there?\n\nQuestion hint:\nSELECT T1.name , T1.lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id\n\nThe incomplete SQL query:\nSELECT T1.name , T1.lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , T1.lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nList all the distinct stations from which a trip of duration below 100 started.\n\nQuestion hint:\nSELECT DISTINCT start_station_name FROM trip\n\nThe incomplete SQL query:\nSELECT DISTINCT start_station_name FROM trip\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are all the different start station names for a trip that lasted less than 100?\n\nQuestion hint:\nSELECT DISTINCT start_station_name\n\nThe incomplete SQL query:\nSELECT DISTINCT start_station_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFind all the zip codes in which the max dew point have never reached 70.\n\nQuestion hint:\nSELECT DISTINCT zip_code\n\nThe incomplete SQL query:\nSELECT DISTINCT zip_code\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are all the different zip codes that have a maximum dew point that was always below 70?\n\nQuestion hint:\nSELECT DISTINCT zip_code FROM weather\n\nThe incomplete SQL query:\nSELECT DISTINCT zip_code FROM weather\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFind the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.\n\nQuestion hint:\nSELECT id FROM trip WHERE duration >= (SELECT avg(duration)\n\nThe incomplete SQL query:\nSELECT id FROM trip WHERE duration >= (SELECT avg(duration)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?\n\nQuestion hint:\nSELECT id FROM trip\n\nThe incomplete SQL query:\nSELECT id FROM trip\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT id FROM trip WHERE duration >= (SELECT avg(duration) FROM trip WHERE zip_code = 94103);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the dates in which the mean sea level pressure was between 30.3 and 31?\n\nQuestion hint:\nSELECT date\n\nThe incomplete SQL query:\nSELECT date\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the dates that have an average sea level pressure between 30.3 and 31?\n\nQuestion hint:\nSELECT date FROM weather\n\nThe incomplete SQL query:\nSELECT date FROM weather\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nFind the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.\n\nQuestion hint:\nSELECT date , max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f\n\nThe incomplete SQL query:\nSELECT date , max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date , max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the days that had the smallest temperature range, and what was that range?\n\nQuestion hint:\nSELECT date , max_temperature_f - min_temperature_f\n\nThe incomplete SQL query:\nSELECT date , max_temperature_f - min_temperature_f\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date , max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the id and name of the stations that have ever had more than 12 bikes available?\n\nQuestion hint:\nSELECT DISTINCT T1.id , T1.name\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.id , T1.name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the different ids and names of the stations that have had more than 12 bikes available?\n\nQuestion hint:\nSELECT DISTINCT T1.id , T1.name\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.id , T1.name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nGive me the zip code where the average mean humidity is below 70 and at least 100 trips took place.\n\nQuestion hint:\nSELECT zip_code FROM weather GROUP BY zip_code\n\nThe incomplete SQL query:\nSELECT zip_code FROM weather GROUP BY zip_code\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?\n\nQuestion hint:\nSELECT zip_code\n\nThe incomplete SQL query:\nSELECT zip_code\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?\n\nQuestion hint:\nSELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT\n\nThe incomplete SQL query:\nSELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat are the names of the stations that are located in Palo Alto but have never been the ending point of the trips\n\nQuestion hint:\nSELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT\n\nThe incomplete SQL query:\nSELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nHow many trips started from Mountain View city and ended at Palo Alto city?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = \"Mountain View\" AND T3.city = \"Palo Alto\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nHow many trips stated from  a station in Mountain View and ended at one in Palo Alto?\n\nQuestion hint:\nSELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id\n\nThe incomplete SQL query:\nSELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = \"Mountain View\" AND T3.city = \"Palo Alto\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the average latitude and longitude of the starting points of all trips?\n\nQuestion hint:\nSELECT avg(T1.lat) , avg(T1.long)\n\nThe incomplete SQL query:\nSELECT avg(T1.lat) , avg(T1.long)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(T1.lat) , avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE station (id NUMBER, name TEXT, lat NUMBER, long NUMBER, dock_count NUMBER, city TEXT, installation_date TEXT, PRIMARY KEY(id, name, lat, long, dock_count, city, installation_date)); CREATE TABLE status (station_id NUMBER, bikes_available NUMBER, docks_available NUMBER, time TEXT, PRIMARY KEY(station_id, bikes_available, docks_available, time), FOREIGN KEY (station_id) REFERENCES station(id)); CREATE TABLE trip (id NUMBER, duration NUMBER, start_date TEXT, start_station_name TEXT, start_station_id NUMBER, end_date TEXT, end_station_name TEXT, end_station_id NUMBER, bike_id NUMBER, subscription_type TEXT, zip_code NUMBER, PRIMARY KEY(id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type, zip_code)); CREATE TABLE weather (date TEXT, max_temperature_f NUMBER, mean_temperature_f NUMBER, min_temperature_f NUMBER, max_dew_point_f NUMBER, mean_dew_point_f NUMBER, min_dew_point_f NUMBER, max_humidity NUMBER, mean_humidity NUMBER, min_humidity NUMBER, max_sea_level_pressure_inches NUMBER, mean_sea_level_pressure_inches NUMBER, min_sea_level_pressure_inches NUMBER, max_visibility_miles NUMBER, mean_visibility_miles NUMBER, min_visibility_miles NUMBER, max_wind_Speed_mph NUMBER, mean_wind_speed_mph NUMBER, max_gust_speed_mph NUMBER, precipitation_inches NUMBER, cloud_cover NUMBER, events TEXT, wind_dir_degrees NUMBER, zip_code NUMBER, PRIMARY KEY(date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity, max_sea_level_pressure_inches, mean_sea_level_pressure_inches, min_sea_level_pressure_inches, max_visibility_miles, mean_visibility_miles, min_visibility_miles, max_wind_Speed_mph, mean_wind_speed_mph, max_gust_speed_mph, precipitation_inches, cloud_cover, events, wind_dir_degrees, zip_code));\n\nSample rows of each table:\nstation: [(2, 'San Jose Diridon Caltrain Station', 37.329732, -121.90178200000001, 27, 'San Jose', '8/6/2013'), (3, 'San Jose Civic Center', 37.330698, -121.888979, 15, 'San Jose', '8/5/2013'), (4, 'Santa Clara at Almaden', 37.333988, -121.894902, 11, 'San Jose', '8/6/2013')]\nstatus: [(3, 12, 3, '2015-06-02 12:46:02'), (3, 12, 3, '2015-06-02 12:47:02'), (3, 12, 3, '2015-06-02 12:48:02')]\ntrip: [(900504, 384, '8/21/2015 17:03', 'Howard at 2nd', 63, '8/21/2015 17:10', 'San Francisco Caltrain 2 (330 Townsend)', 69, 454, 'Subscriber', 94041), (900505, 588, '8/21/2015 17:03', 'South Van Ness at Market', 66, '8/21/2015 17:13', 'San Francisco Caltrain 2 (330 Townsend)', 69, 574, 'Subscriber', 95119), (900506, 196, '8/21/2015 17:04', 'Market at Sansome', 77, '8/21/2015 17:07', 'Harry Bridges Plaza (Ferry Building)', 50, 636, 'Subscriber', 94925)]\nweather: [('8/29/2013', 74, 68, 61, 61, 58, 56, 93, 75, 57, 30.07, 30.02, 29.97, 10, 10, 10, 23, 11, 28, 0, 4, '', 286, 94107), ('8/30/2013', 78, 69, 60, 61, 58, 56, 90, 70, 50, 30.05, 30, 29.93, 10, 10, 7, 29, 13, 35, 0, 2, '', 291, 94107), ('8/31/2013', 71, 64, 57, 57, 56, 54, 93, 75, 57, 30, 29.96, 29.92, 10, 10, 10, 26, 15, 31, 0, 4, '', 284, 94107)]\n\nQuestion:\nWhat is the average latitude and longitude of all starting stations for the trips?\n\nQuestion hint:\nSELECT avg(T1.lat) , avg(T1.long)\n\nThe incomplete SQL query:\nSELECT avg(T1.lat) , avg(T1.long)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(T1.lat) , avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nHow many books are there?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM book;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nList the writers of the books in ascending alphabetical order.\n\nQuestion hint:\nSELECT Writer\n\nThe incomplete SQL query:\nSELECT Writer\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Writer FROM book ORDER BY Writer ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nList the titles of the books in ascending order of issues.\n\nQuestion hint:\nSELECT Title\n\nThe incomplete SQL query:\nSELECT Title\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Title FROM book ORDER BY Issues ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nWhat are the titles of the books whose writer is not \"Elaine Lee\"?\n\nQuestion hint:\nSELECT Title FROM book\n\nThe incomplete SQL query:\nSELECT Title FROM book\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Title FROM book WHERE Writer != \"Elaine Lee\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nWhat are the title and issues of the books?\n\nQuestion hint:\nSELECT Title , Issues\n\nThe incomplete SQL query:\nSELECT Title , Issues\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Title , Issues FROM book;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nWhat are the dates of publications in descending order of price?\n\nQuestion hint:\nSELECT Publication_Date\n\nThe incomplete SQL query:\nSELECT Publication_Date\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Publication_Date FROM publication ORDER BY Price DESC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nWhat are the distinct publishers of publications with price higher than 5000000?\n\nQuestion hint:\nSELECT DISTINCT Publisher\n\nThe incomplete SQL query:\nSELECT DISTINCT Publisher\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nList the publisher of the publication with the highest price.\n\nQuestion hint:\nSELECT Publisher FROM publication ORDER BY Price DESC\n\nThe incomplete SQL query:\nSELECT Publisher FROM publication ORDER BY Price DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nList the publication dates of publications with 3 lowest prices.\n\nQuestion hint:\nSELECT Publication_Date\n\nThe incomplete SQL query:\nSELECT Publication_Date\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Publication_Date FROM publication ORDER BY Price ASC LIMIT 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nShow the title and publication dates of books.\n\nQuestion hint:\nSELECT T1.Title , T2.Publication_Date\n\nThe incomplete SQL query:\nSELECT T1.Title , T2.Publication_Date\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Title , T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nShow writers who have published a book with price more than 4000000.\n\nQuestion hint:\nSELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID\n\nThe incomplete SQL query:\nSELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nShow the titles of books in descending order of publication price.\n\nQuestion hint:\nSELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID\n\nThe incomplete SQL query:\nSELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nShow publishers that have more than one publication.\n\nQuestion hint:\nSELECT Publisher FROM publication GROUP BY Publisher\n\nThe incomplete SQL query:\nSELECT Publisher FROM publication GROUP BY Publisher\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nShow different publishers together with the number of publications they have.\n\nQuestion hint:\nSELECT Publisher , COUNT(*) FROM publication\n\nThe incomplete SQL query:\nSELECT Publisher , COUNT(*) FROM publication\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nPlease show the most common publication date.\n\nQuestion hint:\nSELECT Publication_Date\n\nThe incomplete SQL query:\nSELECT Publication_Date\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nList the writers who have written more than one book.\n\nQuestion hint:\nSELECT Writer FROM book GROUP BY Writer\n\nThe incomplete SQL query:\nSELECT Writer FROM book GROUP BY Writer\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nList the titles of books that are not published.\n\nQuestion hint:\nSELECT Title\n\nThe incomplete SQL query:\nSELECT Title\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Title FROM book WHERE Book_ID NOT IN (SELECT Book_ID FROM publication);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nShow the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.\n\nQuestion hint:\nSELECT Publisher\n\nThe incomplete SQL query:\nSELECT Publisher\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nWhat is the number of distinct publication dates?\n\nQuestion hint:\nSELECT COUNT (DISTINCT Publication_Date)\n\nThe incomplete SQL query:\nSELECT COUNT (DISTINCT Publication_Date)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT (DISTINCT Publication_Date) FROM publication;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nHow many distinct publication dates are there in our record?\n\nQuestion hint:\nSELECT COUNT (DISTINCT Publication_Date)\n\nThe incomplete SQL query:\nSELECT COUNT (DISTINCT Publication_Date)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT COUNT (DISTINCT Publication_Date) FROM publication;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE publication (Publication_ID NUMBER, Book_ID NUMBER, Publisher TEXT, Publication_Date TEXT, Price NUMBER, PRIMARY KEY(Publication_ID, Book_ID, Publisher, Publication_Date, Price), FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)); CREATE TABLE book (Book_ID NUMBER, Title TEXT, Issues NUMBER, Writer TEXT, PRIMARY KEY(Book_ID, Title, Issues, Writer));\n\nSample rows of each table:\npublication: [(1, 1, 'Pearson', 'August 2008', 15000000.0), (2, 3, 'Thomson Reuters', 'March 2008', 6000000.0), (3, 4, 'Wiley', 'June 2006', 4100000.0)]\nbook: [(1, 'The Black Lamb', 6.0, 'Timothy Truman'), (2, 'Bloody Mary', 4.0, 'Garth Ennis'), (3, 'Bloody Mary : Lady Liberty', 4.0, 'Garth Ennis')]\n\nQuestion:\nShow the prices of publications whose publisher is either \"Person\" or \"Wiley\"\n\nQuestion hint:\nSELECT Price\n\nThe incomplete SQL query:\nSELECT Price\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Price FROM publication WHERE Publisher = \"Person\" OR Publisher = \"Wiley\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nHow many actors are there?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM actor;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nCount the number of actors.\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM actor;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nList the name of actors in ascending alphabetical order.\n\nQuestion hint:\nSELECT Name\n\nThe incomplete SQL query:\nSELECT Name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM actor ORDER BY Name ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWhat are the names of actors, ordered alphabetically?\n\nQuestion hint:\nSELECT Name FROM actor\n\nThe incomplete SQL query:\nSELECT Name FROM actor\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM actor ORDER BY Name ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWhat are the characters and duration of actors?\n\nQuestion hint:\nSELECT Character , Duration\n\nThe incomplete SQL query:\nSELECT Character , Duration\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Character , Duration FROM actor;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nReturn the characters and durations for each actor.\n\nQuestion hint:\nSELECT Character , Duration\n\nThe incomplete SQL query:\nSELECT Character , Duration\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Character , Duration FROM actor;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nList the name of actors whose age is not 20.\n\nQuestion hint:\nSELECT Name FROM actor\n\nThe incomplete SQL query:\nSELECT Name FROM actor\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM actor WHERE Age != 20;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWhat are the names of actors who are not 20 years old?\n\nQuestion hint:\nSELECT Name\n\nThe incomplete SQL query:\nSELECT Name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM actor WHERE Age != 20;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWhat are the characters of actors in descending order of age?\n\nQuestion hint:\nSELECT Character\n\nThe incomplete SQL query:\nSELECT Character\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Character FROM actor ORDER BY age DESC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nReturn the characters for actors, ordered by age descending.\n\nQuestion hint:\nSELECT Character FROM actor\n\nThe incomplete SQL query:\nSELECT Character FROM actor\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Character FROM actor ORDER BY age DESC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWhat is the duration of the oldest actor?\n\nQuestion hint:\nSELECT Duration FROM actor\n\nThe incomplete SQL query:\nSELECT Duration FROM actor\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nReturn the duration of the actor with the greatest age.\n\nQuestion hint:\nSELECT Duration\n\nThe incomplete SQL query:\nSELECT Duration\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWhat are the names of musicals with nominee \"Bob Fosse\"?\n\nQuestion hint:\nSELECT Name FROM musical\n\nThe incomplete SQL query:\nSELECT Name FROM musical\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nReturn the names of musicals who have the nominee Bob Fosse.\n\nQuestion hint:\nSELECT Name\n\nThe incomplete SQL query:\nSELECT Name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM musical WHERE Nominee = \"Bob Fosse\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWhat are the distinct nominees of the musicals with the award that is not \"Tony Award\"?\n\nQuestion hint:\nSELECT DISTINCT Nominee\n\nThe incomplete SQL query:\nSELECT DISTINCT Nominee\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nReturn the different nominees of musicals that have an award that is not the Tony Award.\n\nQuestion hint:\nSELECT DISTINCT Nominee\n\nThe incomplete SQL query:\nSELECT DISTINCT Nominee\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT Nominee FROM musical WHERE Award != \"Tony Award\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nShow names of actors and names of musicals they are in.\n\nQuestion hint:\nSELECT T1.Name , T2.Name\n\nThe incomplete SQL query:\nSELECT T1.Name , T2.Name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name , T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWhat are the names of actors and the musicals that they are in?\n\nQuestion hint:\nSELECT T1.Name , T2.Name\n\nThe incomplete SQL query:\nSELECT T1.Name , T2.Name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name , T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nShow names of actors that have appeared in musical with name \"The Phantom of the Opera\".\n\nQuestion hint:\nSELECT T1.Name\n\nThe incomplete SQL query:\nSELECT T1.Name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = \"The Phantom of the Opera\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWhat are the names of actors who have been in the musical titled The Phantom of the Opera?\n\nQuestion hint:\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID\n\nThe incomplete SQL query:\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = \"The Phantom of the Opera\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nShow names of actors in descending order of the year their musical is awarded.\n\nQuestion hint:\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID\n\nThe incomplete SQL query:\nSELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWhat are the names of actors ordered descending by the year in which their musical was awarded?\n\nQuestion hint:\nSELECT T1.Name\n\nThe incomplete SQL query:\nSELECT T1.Name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nShow names of musicals and the number of actors who have appeared in the musicals.\n\nQuestion hint:\nSELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID\n\nThe incomplete SQL query:\nSELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nHow many actors have appeared in each musical?\n\nQuestion hint:\nSELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID\n\nThe incomplete SQL query:\nSELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Name , COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nShow names of musicals which have at least three actors.\n\nQuestion hint:\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID\n\nThe incomplete SQL query:\nSELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWhat are the names of musicals who have at 3 or more actors?\n\nQuestion hint:\nSELECT T2.Name\n\nThe incomplete SQL query:\nSELECT T2.Name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nShow different nominees and the number of musicals they have been nominated.\n\nQuestion hint:\nSELECT Nominee , COUNT(*)\n\nThe incomplete SQL query:\nSELECT Nominee , COUNT(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nHow many musicals has each nominee been nominated for?\n\nQuestion hint:\nSELECT Nominee , COUNT(*)\n\nThe incomplete SQL query:\nSELECT Nominee , COUNT(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nPlease show the nominee who has been nominated the greatest number of times.\n\nQuestion hint:\nSELECT Nominee FROM musical\n\nThe incomplete SQL query:\nSELECT Nominee FROM musical\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWho is the nominee who has been nominated for the most musicals?\n\nQuestion hint:\nSELECT Nominee\n\nThe incomplete SQL query:\nSELECT Nominee\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nList the most common result of the musicals.\n\nQuestion hint:\nSELECT RESULT\n\nThe incomplete SQL query:\nSELECT RESULT\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nReturn the most frequent result across all musicals.\n\nQuestion hint:\nSELECT RESULT FROM musical GROUP BY RESULT\n\nThe incomplete SQL query:\nSELECT RESULT FROM musical GROUP BY RESULT\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nList the nominees that have been nominated more than two musicals.\n\nQuestion hint:\nSELECT Nominee FROM musical\n\nThe incomplete SQL query:\nSELECT Nominee FROM musical\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWho are the nominees who have been nominated more than two times?\n\nQuestion hint:\nSELECT Nominee\n\nThe incomplete SQL query:\nSELECT Nominee\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nList the name of musicals that do not have actors.\n\nQuestion hint:\nSELECT Name\n\nThe incomplete SQL query:\nSELECT Name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWhat are the names of musicals who have no actors?\n\nQuestion hint:\nSELECT Name FROM musical WHERE Musical_ID NOT IN (\n\nThe incomplete SQL query:\nSELECT Name FROM musical WHERE Musical_ID NOT IN (\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nShow the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".\n\nQuestion hint:\nSELECT Nominee FROM musical\n\nThe incomplete SQL query:\nSELECT Nominee FROM musical\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award = \"Drama Desk Award\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWho are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?\n\nQuestion hint:\nSELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical\n\nThe incomplete SQL query:\nSELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award = \"Drama Desk Award\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nShow the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".\n\nQuestion hint:\nSELECT Nominee\n\nThe incomplete SQL query:\nSELECT Nominee\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE musical (Musical_ID NUMBER, Name TEXT, Year NUMBER, Award TEXT, Category TEXT, Nominee TEXT, Result TEXT, PRIMARY KEY(Musical_ID, Name, Year, Award, Category, Nominee, Result)); CREATE TABLE actor (Actor_ID NUMBER, Name TEXT, Musical_ID NUMBER, Character TEXT, Duration TEXT, age NUMBER, PRIMARY KEY(Actor_ID, Name, Musical_ID, Character, Duration, age), FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID));\n\nSample rows of each table:\nmusical: [(1, 'The Phantom of the Opera', 1986, 'Tony Award', 'Best Book of a Musical', 'Bob Fosse', 'Nominated'), (2, 'Les Misérables', 1986, 'Tony Award', 'Best Performance by a Leading Actor in a Musical', 'Cleavant Derricks', 'Nominated'), (3, 'Wicked', 1986, 'Tony Award', 'Best Direction of a Musical', 'Bob Fosse', 'Nominated')]\nactor: [(1, 'Ray Meagher', 1, 'Alf Stewart', '1988—', 26), (2, 'Tom Oliver', 1, 'Lou Carpenter', '1988, 1992—', 22), (3, 'Lynne McGranger', 2, 'Irene Roberts', '1993—', 21)]\n\nQuestion:\nWho are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?\n\nQuestion hint:\nSELECT Nominee FROM musical\n\nThe incomplete SQL query:\nSELECT Nominee FROM musical\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Nominee FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the emails of the user named \"Mary\".\n\nQuestion hint:\nSELECT email FROM user_profiles\n\nThe incomplete SQL query:\nSELECT email FROM user_profiles\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT email FROM user_profiles WHERE name = 'Mary';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nWhat is the partition id of the user named \"Iron Man\".\n\nQuestion hint:\nSELECT partitionid\n\nThe incomplete SQL query:\nSELECT partitionid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT partitionid FROM user_profiles WHERE name = 'Iron Man';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nHow many users are there?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM user_profiles;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nHow many followers does each user have?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM follows;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the number of followers for each user.\n\nQuestion hint:\nSELECT count(*) FROM follows\n\nThe incomplete SQL query:\nSELECT count(*) FROM follows\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM follows GROUP BY f1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the number of tweets in record.\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM tweets;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the number of users who posted some tweets.\n\nQuestion hint:\nSELECT count(DISTINCT UID)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT UID)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT UID) FROM tweets;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the name and email of the user whose name contains the word ‘Swift’.\n\nQuestion hint:\nSELECT name , email FROM user_profiles\n\nThe incomplete SQL query:\nSELECT name , email FROM user_profiles\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , email FROM user_profiles WHERE name LIKE '%Swift%';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the names of users whose emails contain ‘superstar’ or ‘edu’.\n\nQuestion hint:\nSELECT name FROM user_profiles\n\nThe incomplete SQL query:\nSELECT name FROM user_profiles\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nReturn the text of tweets about the topic 'intern'.\n\nQuestion hint:\nSELECT text\n\nThe incomplete SQL query:\nSELECT text\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT text FROM tweets WHERE text LIKE '%intern%';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the name and email of the users who have more than 1000 followers.\n\nQuestion hint:\nSELECT name , email\n\nThe incomplete SQL query:\nSELECT name , email\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , email FROM user_profiles WHERE followers > 1000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".\n\nQuestion hint:\nSELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1\n\nThe incomplete SQL query:\nSELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count(*) > (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift');",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the name and email for the users who have more than one follower.\n\nQuestion hint:\nSELECT T1.name , T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1\n\nThe incomplete SQL query:\nSELECT T1.name , T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count(*) > 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the names of users who have more than one tweet.\n\nQuestion hint:\nSELECT T1.name\n\nThe incomplete SQL query:\nSELECT T1.name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count(*) > 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the id of users who are followed by Mary and Susan.\n\nQuestion hint:\nSELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2\n\nThe incomplete SQL query:\nSELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Susan\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the id of users who are followed by Mary or Susan.\n\nQuestion hint:\nSELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2\n\nThe incomplete SQL query:\nSELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = \"Mary\" OR T1.name = \"Susan\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the name of the user who has the largest number of followers.\n\nQuestion hint:\nSELECT name FROM user_profiles\n\nThe incomplete SQL query:\nSELECT name FROM user_profiles\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the name and email of the user followed by the least number of people.\n\nQuestion hint:\nSELECT name , email FROM user_profiles\n\nThe incomplete SQL query:\nSELECT name , email FROM user_profiles\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , email FROM user_profiles ORDER BY followers LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nList the name and number of followers for each user, and sort the results by the number of followers in descending order.\n\nQuestion hint:\nSELECT name , followers\n\nThe incomplete SQL query:\nSELECT name , followers\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , followers FROM user_profiles ORDER BY followers DESC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nList the names of 5 users followed by the largest number of other users.\n\nQuestion hint:\nSELECT name\n\nThe incomplete SQL query:\nSELECT name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nList the text of all tweets in the order of date.\n\nQuestion hint:\nSELECT text FROM tweets\n\nThe incomplete SQL query:\nSELECT text FROM tweets\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT text FROM tweets ORDER BY createdate;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the name of each user and number of tweets tweeted by each of them.\n\nQuestion hint:\nSELECT T1.name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid\n\nThe incomplete SQL query:\nSELECT T1.name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the name and partition id for users who tweeted less than twice.\n\nQuestion hint:\nSELECT T1.name , T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid\n\nThe incomplete SQL query:\nSELECT T1.name , T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count(*) < 2;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the name of the user who tweeted more than once, and number of tweets tweeted by them.\n\nQuestion hint:\nSELECT T1.name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid\n\nThe incomplete SQL query:\nSELECT T1.name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING count(*) > 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the average number of followers for the users who do not have any tweet.\n\nQuestion hint:\nSELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID\n\nThe incomplete SQL query:\nSELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the average number of followers for the users who had some tweets.\n\nQuestion hint:\nSELECT avg(followers)\n\nThe incomplete SQL query:\nSELECT avg(followers)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE follows (f1 NUMBER, f2 NUMBER, PRIMARY KEY(f1, f2), FOREIGN KEY (f2) REFERENCES user_profiles(uid), FOREIGN KEY (f1) REFERENCES user_profiles(uid)); CREATE TABLE tweets (id NUMBER, uid NUMBER, text TEXT, createdate TIME, PRIMARY KEY(id, uid, text, createdate), FOREIGN KEY (uid) REFERENCES user_profiles(uid)); CREATE TABLE user_profiles (uid NUMBER, name TEXT, email TEXT, partitionid NUMBER, followers NUMBER, PRIMARY KEY(uid, name, email, partitionid, followers));\n\nSample rows of each table:\nfollows: [(1, 2), (2, 3), (7, 1)]\ntweets: [(1, 1, \"Hello I'm Tony Stark.\", '2018-03-09 20:00:14'), (2, 3, 'Today I have went shopping at Laffayette.', '2018-03-09 20:01:02'), (4, 1, 'My company is hiring interns.', '2018-03-12 02:30:30')]\nuser_profiles: [(1, 'Iron Man', 'ts@richest.com', 1, 6662425), (2, 'Mary', 'Mary@yale.edu', 2, 890), (3, 'Black Widow\\n', 'bw@superhero.com', 23, 35425845)]\n\nQuestion:\nFind the maximum and total number of followers of all users.\n\nQuestion hint:\nSELECT max(followers) , sum(followers)\n\nThe incomplete SQL query:\nSELECT max(followers) , sum(followers)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(followers) , sum(followers) FROM user_profiles;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the names of all the catalog entries.\n\nQuestion hint:\nSELECT distinct(catalog_entry_name)\n\nThe incomplete SQL query:\nSELECT distinct(catalog_entry_name)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT distinct(catalog_entry_name) FROM catalog_contents;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhat are all the catalog entry names?\n\nQuestion hint:\nSELECT distinct(catalog_entry_name)\n\nThe incomplete SQL query:\nSELECT distinct(catalog_entry_name)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT distinct(catalog_entry_name) FROM catalog_contents;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the list of attribute data types possessed by more than 3 attribute definitions.\n\nQuestion hint:\nSELECT attribute_data_type\n\nThe incomplete SQL query:\nSELECT attribute_data_type\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhat are the attribute data types with more than 3 attribute definitions?\n\nQuestion hint:\nSELECT attribute_data_type\n\nThe incomplete SQL query:\nSELECT attribute_data_type\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*) > 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhat is the attribute data type of the attribute with name \"Green\"?\n\nQuestion hint:\nSELECT attribute_data_type\n\nThe incomplete SQL query:\nSELECT attribute_data_type\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = \"Green\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the attribute data type for the attribute named \"Green\".\n\nQuestion hint:\nSELECT attribute_data_type\n\nThe incomplete SQL query:\nSELECT attribute_data_type\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = \"Green\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the name and level of catalog structure with level between 5 and 10.\n\nQuestion hint:\nSELECT catalog_level_name , catalog_level_number FROM Catalog_Structure\n\nThe incomplete SQL query:\nSELECT catalog_level_name , catalog_level_number FROM Catalog_Structure\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhat are the name and level of catalog structure with level number between 5 and 10\n\nQuestion hint:\nSELECT catalog_level_name , catalog_level_number\n\nThe incomplete SQL query:\nSELECT catalog_level_name , catalog_level_number\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_level_name , catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind all the catalog publishers whose name contains \"Murray\"\n\nQuestion hint:\nSELECT distinct(catalog_publisher) FROM catalogs\n\nThe incomplete SQL query:\nSELECT distinct(catalog_publisher) FROM catalogs\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhich catalog publishers have substring \"Murray\" in their names?\n\nQuestion hint:\nSELECT distinct(catalog_publisher) FROM catalogs\n\nThe incomplete SQL query:\nSELECT distinct(catalog_publisher) FROM catalogs\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhich catalog publisher has published the most catalogs?\n\nQuestion hint:\nSELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher\n\nThe incomplete SQL query:\nSELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the catalog publisher that has the most catalogs.\n\nQuestion hint:\nSELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC\n\nThe incomplete SQL query:\nSELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the names and publication dates of all catalogs that have catalog level number greater than 5.\n\nQuestion hint:\nSELECT t1.catalog_name , t1.date_of_publication\n\nThe incomplete SQL query:\nSELECT t1.catalog_name , t1.date_of_publication\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t1.catalog_name , t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhat are the name and publication date of the catalogs with catalog level number above 5?\n\nQuestion hint:\nSELECT t1.catalog_name , t1.date_of_publication\n\nThe incomplete SQL query:\nSELECT t1.catalog_name , t1.date_of_publication\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t1.catalog_name , t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhat are the entry names of catalog with the attribute possessed by most entries.\n\nQuestion hint:\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes\n\nThe incomplete SQL query:\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the entry names of the catalog with the attribute that have the most entries.\n\nQuestion hint:\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes\n\nThe incomplete SQL query:\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhat is the entry name of the most expensive catalog (in USD)?\n\nQuestion hint:\nSELECT catalog_entry_name\n\nThe incomplete SQL query:\nSELECT catalog_entry_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the entry name of the catalog with the highest price (in USD).\n\nQuestion hint:\nSELECT catalog_entry_name\n\nThe incomplete SQL query:\nSELECT catalog_entry_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhat is the level name of the cheapest catalog (in USD)?\n\nQuestion hint:\nSELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number\n\nThe incomplete SQL query:\nSELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the level name of the catalog with the lowest price (in USD).\n\nQuestion hint:\nSELECT t2.catalog_level_name\n\nThe incomplete SQL query:\nSELECT t2.catalog_level_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhat are the average and minimum price (in Euro) of all products?\n\nQuestion hint:\nSELECT avg(price_in_euros) , min(price_in_euros)\n\nThe incomplete SQL query:\nSELECT avg(price_in_euros) , min(price_in_euros)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(price_in_euros) , min(price_in_euros) FROM catalog_contents;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nGive me the average and minimum price (in Euro) of the products.\n\nQuestion hint:\nSELECT avg(price_in_euros) , min(price_in_euros)\n\nThe incomplete SQL query:\nSELECT avg(price_in_euros) , min(price_in_euros)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(price_in_euros) , min(price_in_euros) FROM catalog_contents;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhat is the product with the highest height? Give me the catalog entry name.\n\nQuestion hint:\nSELECT catalog_entry_name\n\nThe incomplete SQL query:\nSELECT catalog_entry_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhich catalog content has the highest height? Give me the catalog entry name.\n\nQuestion hint:\nSELECT catalog_entry_name FROM catalog_contents\n\nThe incomplete SQL query:\nSELECT catalog_entry_name FROM catalog_contents\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the name of the product that has the smallest capacity.\n\nQuestion hint:\nSELECT catalog_entry_name FROM catalog_contents\n\nThe incomplete SQL query:\nSELECT catalog_entry_name FROM catalog_contents\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhich catalog content has the smallest capacity? Return the catalog entry name.\n\nQuestion hint:\nSELECT catalog_entry_name FROM catalog_contents\n\nThe incomplete SQL query:\nSELECT catalog_entry_name FROM catalog_contents\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the names of all the products whose stock number starts with \"2\".\n\nQuestion hint:\nSELECT catalog_entry_name\n\nThe incomplete SQL query:\nSELECT catalog_entry_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhich catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.\n\nQuestion hint:\nSELECT catalog_entry_name\n\nThe incomplete SQL query:\nSELECT catalog_entry_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the names of catalog entries with level number 8.\n\nQuestion hint:\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id\n\nThe incomplete SQL query:\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhat are the names of catalog entries with level number 8?\n\nQuestion hint:\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id\n\nThe incomplete SQL query:\nSELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = \"8\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the names of the products with length smaller than 3 or height greater than 5.\n\nQuestion hint:\nSELECT catalog_entry_name FROM catalog_contents\n\nThe incomplete SQL query:\nSELECT catalog_entry_name FROM catalog_contents\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhich catalog contents have length below 3 or above 5? Find the catalog entry names.\n\nQuestion hint:\nSELECT catalog_entry_name FROM catalog_contents\n\nThe incomplete SQL query:\nSELECT catalog_entry_name FROM catalog_contents\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the name and attribute ID of the attribute definitions with attribute value 0.\n\nQuestion hint:\nSELECT t1.attribute_name , t1.attribute_id\n\nThe incomplete SQL query:\nSELECT t1.attribute_name , t1.attribute_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t1.attribute_name , t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhich attribute definitions have attribute value 0? Give me the attribute name and attribute ID.\n\nQuestion hint:\nSELECT t1.attribute_name , t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id\n\nThe incomplete SQL query:\nSELECT t1.attribute_name , t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT t1.attribute_name , t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the name and capacity of products with price greater than 700 (in USD).\n\nQuestion hint:\nSELECT catalog_entry_name , capacity\n\nThe incomplete SQL query:\nSELECT catalog_entry_name , capacity\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhich catalog contents has price above 700 dollars? Show their catalog entry names and capacities.\n\nQuestion hint:\nSELECT catalog_entry_name , capacity\n\nThe incomplete SQL query:\nSELECT catalog_entry_name , capacity\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_entry_name , capacity FROM Catalog_Contents WHERE price_in_dollars > 700;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the dates on which more than one revisions were made.\n\nQuestion hint:\nSELECT date_of_latest_revision FROM Catalogs\n\nThe incomplete SQL query:\nSELECT date_of_latest_revision FROM Catalogs\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*) > 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nOn which days more than one revisions were made on catalogs.\n\nQuestion hint:\nSELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision\n\nThe incomplete SQL query:\nSELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*) > 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nHow many products are there in the records?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM catalog_contents;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nFind the total number of catalog contents.\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM catalog_contents;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nName all the products with next entry ID greater than 8.\n\nQuestion hint:\nSELECT catalog_entry_name FROM catalog_contents\n\nThe incomplete SQL query:\nSELECT catalog_entry_name FROM catalog_contents\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Attribute_Definitions (attribute_id NUMBER, attribute_name TEXT, attribute_data_type TEXT, PRIMARY KEY(attribute_id, attribute_name, attribute_data_type)); CREATE TABLE Catalogs (catalog_id NUMBER, catalog_name TEXT, catalog_publisher TEXT, date_of_publication TIME, date_of_latest_revision TIME, PRIMARY KEY(catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision)); CREATE TABLE Catalog_Structure (catalog_level_number NUMBER, catalog_id NUMBER, catalog_level_name TEXT, PRIMARY KEY(catalog_level_number, catalog_id, catalog_level_name), FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)); CREATE TABLE Catalog_Contents (catalog_entry_id NUMBER, catalog_level_number NUMBER, parent_entry_id NUMBER, previous_entry_id NUMBER, next_entry_id NUMBER, catalog_entry_name TEXT, product_stock_number TEXT, price_in_dollars NUMBER, price_in_euros NUMBER, price_in_pounds NUMBER, capacity TEXT, length TEXT, height TEXT, width TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds, capacity, length, height, width), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)); CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id NUMBER, catalog_level_number NUMBER, attribute_id NUMBER, attribute_value TEXT, PRIMARY KEY(catalog_entry_id, catalog_level_number, attribute_id, attribute_value), FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number), FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id));\n\nSample rows of each table:\nAttribute_Definitions: [(1, 'Green', 'Bool'), (2, 'Black', 'Bool'), (3, 'Yellow', 'Bool')]\nCatalogs: [(1, 'Chocolate', 'Koepp-Rutherford handmade chocolate store', '2013-03-15 05:09:17', '2017-09-26 12:10:36'), (2, 'Coffee Bean', 'Murray Coffee shop', '2012-04-13 06:37:09', '2017-10-26 01:16:51'), (3, 'Lemonade', 'Russel-Gislason Lemon shop', '2012-11-27 19:29:22', '2017-12-04 06:48:13')]\nCatalog_Structure: [(1, 1, 'Category'), (8, 2, 'Sub-Category'), (9, 8, 'Product')]\nCatalog_Contents: [(1, 1, 5, 9, 7, 'Cola', '89 cp', 200.78, 159.84, 172.17, '1', '3', '9', '5'), (2, 8, 6, 9, 8, 'Root beer', '37 hq', 687.59, 590.11, 471.78, '8', '6', '5', '6'), (3, 8, 6, 6, 1, 'Cream Soda', '52 ee', 360.5, 202.32, 110.32, '5', '9', '7', '8')]\nCatalog_Contents_Additional_Attributes: [(5, 8, 4, '1'), (15, 9, 3, '0'), (11, 1, 2, '0')]\n\nQuestion:\nWhat are the catalog entry names of the products with next entry ID above 8?\n\nQuestion hint:\nSELECT catalog_entry_name\n\nThe incomplete SQL query:\nSELECT catalog_entry_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nHow many aircrafts do we have?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Aircraft;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nHow many aircrafts exist in the database?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Aircraft;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow name and distance for all aircrafts.\n\nQuestion hint:\nSELECT name , distance\n\nThe incomplete SQL query:\nSELECT name , distance\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , distance FROM Aircraft;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the names and distances for all airplanes?\n\nQuestion hint:\nSELECT name , distance\n\nThe incomplete SQL query:\nSELECT name , distance\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , distance FROM Aircraft;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow ids for all aircrafts with more than 1000 distance.\n\nQuestion hint:\nSELECT aid FROM Aircraft\n\nThe incomplete SQL query:\nSELECT aid FROM Aircraft\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT aid FROM Aircraft WHERE distance > 1000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the ids of all aircrafts that can cover a distance of more than 1000?\n\nQuestion hint:\nSELECT aid FROM Aircraft\n\nThe incomplete SQL query:\nSELECT aid FROM Aircraft\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT aid FROM Aircraft WHERE distance > 1000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nHow many aircrafts have distance between 1000 and 5000?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the count of aircrafts that have a distance between 1000 and 5000?\n\nQuestion hint:\nSELECT count(*) FROM Aircraft\n\nThe incomplete SQL query:\nSELECT count(*) FROM Aircraft\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the name and distance for aircraft with id 12?\n\nQuestion hint:\nSELECT name , distance FROM Aircraft\n\nThe incomplete SQL query:\nSELECT name , distance FROM Aircraft\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , distance FROM Aircraft WHERE aid = 12;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the name and distance for the aircraft that has an id of 12?\n\nQuestion hint:\nSELECT name , distance FROM Aircraft\n\nThe incomplete SQL query:\nSELECT name , distance FROM Aircraft\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , distance FROM Aircraft WHERE aid = 12;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the minimum, average, and maximum distance of all aircrafts.\n\nQuestion hint:\nSELECT min(distance) , avg(distance) , max(distance)\n\nThe incomplete SQL query:\nSELECT min(distance) , avg(distance) , max(distance)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT min(distance) , avg(distance) , max(distance) FROM Aircraft;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nReturn the minimum, average and maximum distances traveled across all aircrafts.\n\nQuestion hint:\nSELECT min(distance) , avg(distance) , max(distance)\n\nThe incomplete SQL query:\nSELECT min(distance) , avg(distance) , max(distance)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT min(distance) , avg(distance) , max(distance) FROM Aircraft;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow the id and name of the aircraft with the maximum distance.\n\nQuestion hint:\nSELECT aid , name FROM Aircraft ORDER BY distance DESC\n\nThe incomplete SQL query:\nSELECT aid , name FROM Aircraft ORDER BY distance DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the id and name of the aircraft that can cover the maximum distance?\n\nQuestion hint:\nSELECT aid , name\n\nThe incomplete SQL query:\nSELECT aid , name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT aid , name FROM Aircraft ORDER BY distance DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow the name of aircrafts with top three lowest distances.\n\nQuestion hint:\nSELECT name FROM Aircraft ORDER BY distance\n\nThe incomplete SQL query:\nSELECT name FROM Aircraft ORDER BY distance\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the aircrafts with top 3 shortest lengthes? List their names.\n\nQuestion hint:\nSELECT name FROM Aircraft\n\nThe incomplete SQL query:\nSELECT name FROM Aircraft\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow names for all aircrafts with distances more than the average.\n\nQuestion hint:\nSELECT name FROM Aircraft\n\nThe incomplete SQL query:\nSELECT name FROM Aircraft\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM Aircraft WHERE distance > (SELECT avg(distance) FROM Aircraft);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the names of all aircrafts that can cover more distances than average?\n\nQuestion hint:\nSELECT name FROM Aircraft WHERE distance > (\n\nThe incomplete SQL query:\nSELECT name FROM Aircraft WHERE distance > (\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM Aircraft WHERE distance > (SELECT avg(distance) FROM Aircraft);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nHow many employees do we have?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Employee;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the number of employees?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Employee;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow name and salary for all employees sorted by salary.\n\nQuestion hint:\nSELECT name , salary\n\nThe incomplete SQL query:\nSELECT name , salary\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , salary FROM Employee ORDER BY salary;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the name and salary of all employees in order of salary?\n\nQuestion hint:\nSELECT name , salary\n\nThe incomplete SQL query:\nSELECT name , salary\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , salary FROM Employee ORDER BY salary;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow ids for all employees with at least 100000 salary.\n\nQuestion hint:\nSELECT eid FROM Employee\n\nThe incomplete SQL query:\nSELECT eid FROM Employee\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT eid FROM Employee WHERE salary > 100000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the id of every employee who has at least a salary of  100000?\n\nQuestion hint:\nSELECT eid\n\nThe incomplete SQL query:\nSELECT eid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT eid FROM Employee WHERE salary > 100000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nHow many employees have salary between 100000 and 200000?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the number of employees that have a salary between 100000 and 200000?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the name and salary for employee with id 242518965?\n\nQuestion hint:\nSELECT name , salary FROM Employee\n\nThe incomplete SQL query:\nSELECT name , salary FROM Employee\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , salary FROM Employee WHERE eid = 242518965;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the name and salary of the employee with the id 242518965?\n\nQuestion hint:\nSELECT name , salary FROM Employee\n\nThe incomplete SQL query:\nSELECT name , salary FROM Employee\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , salary FROM Employee WHERE eid = 242518965;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is average and maximum salary of all employees.\n\nQuestion hint:\nSELECT avg(salary) , max(salary)\n\nThe incomplete SQL query:\nSELECT avg(salary) , max(salary)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(salary) , max(salary) FROM Employee;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the average and largest salary of all employees?\n\nQuestion hint:\nSELECT avg(salary) , max(salary)\n\nThe incomplete SQL query:\nSELECT avg(salary) , max(salary)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(salary) , max(salary) FROM Employee;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow the id and name of the employee with maximum salary.\n\nQuestion hint:\nSELECT eid , name FROM Employee ORDER BY salary DESC\n\nThe incomplete SQL query:\nSELECT eid , name FROM Employee ORDER BY salary DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT eid , name FROM Employee ORDER BY salary DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the id and name of the employee with the highest salary?\n\nQuestion hint:\nSELECT eid , name\n\nThe incomplete SQL query:\nSELECT eid , name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT eid , name FROM Employee ORDER BY salary DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow the name of employees with three lowest salaries.\n\nQuestion hint:\nSELECT name FROM Employee\n\nThe incomplete SQL query:\nSELECT name FROM Employee\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the name of the 3 employees who get paid the least?\n\nQuestion hint:\nSELECT name\n\nThe incomplete SQL query:\nSELECT name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow names for all employees with salary more than the average.\n\nQuestion hint:\nSELECT name FROM Employee WHERE salary > (\n\nThe incomplete SQL query:\nSELECT name FROM Employee WHERE salary > (\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM Employee WHERE salary > (SELECT avg(salary) FROM Employee);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the names of all employees who have a salary higher than average?\n\nQuestion hint:\nSELECT name\n\nThe incomplete SQL query:\nSELECT name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM Employee WHERE salary > (SELECT avg(salary) FROM Employee);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow the id and salary of Mark Young.\n\nQuestion hint:\nSELECT eid , salary FROM Employee\n\nThe incomplete SQL query:\nSELECT eid , salary FROM Employee\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT eid , salary FROM Employee WHERE name = 'Mark Young';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the id and salary of the employee named Mark Young?\n\nQuestion hint:\nSELECT eid , salary\n\nThe incomplete SQL query:\nSELECT eid , salary\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT eid , salary FROM Employee WHERE name = 'Mark Young';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nHow many flights do we have?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Flight;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the number of flights?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Flight;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow flight number, origin, destination of all flights in the alphabetical order of the departure cities.\n\nQuestion hint:\nSELECT flno , origin , destination FROM Flight\n\nThe incomplete SQL query:\nSELECT flno , origin , destination FROM Flight\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT flno , origin , destination FROM Flight ORDER BY origin;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the flight number, origin, and destination for all flights in alphabetical order by departure cities?\n\nQuestion hint:\nSELECT flno , origin , destination FROM Flight\n\nThe incomplete SQL query:\nSELECT flno , origin , destination FROM Flight\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT flno , origin , destination FROM Flight ORDER BY origin;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow all flight number from Los Angeles.\n\nQuestion hint:\nSELECT flno FROM Flight\n\nThe incomplete SQL query:\nSELECT flno FROM Flight\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT flno FROM Flight WHERE origin = \"Los Angeles\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the numbers of all flights coming from Los Angeles?\n\nQuestion hint:\nSELECT flno\n\nThe incomplete SQL query:\nSELECT flno\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT flno FROM Flight WHERE origin = \"Los Angeles\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow origins of all flights with destination Honolulu.\n\nQuestion hint:\nSELECT origin\n\nThe incomplete SQL query:\nSELECT origin\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT origin FROM Flight WHERE destination = \"Honolulu\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the origins of all flights that are headed to Honolulu?\n\nQuestion hint:\nSELECT origin\n\nThe incomplete SQL query:\nSELECT origin\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT origin FROM Flight WHERE destination = \"Honolulu\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow me the departure date and arrival date for all flights from Los Angeles to Honolulu.\n\nQuestion hint:\nSELECT departure_date , arrival_date FROM Flight\n\nThe incomplete SQL query:\nSELECT departure_date , arrival_date FROM Flight\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT departure_date , arrival_date FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the departure and arrival dates of all flights from LA to Honolulu?\n\nQuestion hint:\nSELECT departure_date , arrival_date\n\nThe incomplete SQL query:\nSELECT departure_date , arrival_date\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT departure_date , arrival_date FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow flight number for all flights with more than 2000 distance.\n\nQuestion hint:\nSELECT flno\n\nThe incomplete SQL query:\nSELECT flno\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT flno FROM Flight WHERE distance > 2000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the numbers of all flights that can cover a distance of more than 2000?\n\nQuestion hint:\nSELECT flno FROM Flight\n\nThe incomplete SQL query:\nSELECT flno FROM Flight\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT flno FROM Flight WHERE distance > 2000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the average price for flights from Los Angeles to Honolulu.\n\nQuestion hint:\nSELECT avg(price) FROM Flight\n\nThe incomplete SQL query:\nSELECT avg(price) FROM Flight\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(price) FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the average price for flights from LA to Honolulu?\n\nQuestion hint:\nSELECT avg(price)\n\nThe incomplete SQL query:\nSELECT avg(price)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(price) FROM Flight WHERE origin = \"Los Angeles\" AND destination = \"Honolulu\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow origin and destination for flights with price higher than 300.\n\nQuestion hint:\nSELECT origin , destination\n\nThe incomplete SQL query:\nSELECT origin , destination\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT origin , destination FROM Flight WHERE price > 300;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the origin and destination for all flights whose price is higher than 300?\n\nQuestion hint:\nSELECT origin , destination\n\nThe incomplete SQL query:\nSELECT origin , destination\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT origin , destination FROM Flight WHERE price > 300;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow the flight number and distance of the flight with maximum price.\n\nQuestion hint:\nSELECT flno , distance FROM Flight ORDER BY price DESC\n\nThe incomplete SQL query:\nSELECT flno , distance FROM Flight ORDER BY price DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT flno , distance FROM Flight ORDER BY price DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the flight number and its distance for the one with the maximum price?\n\nQuestion hint:\nSELECT flno , distance\n\nThe incomplete SQL query:\nSELECT flno , distance\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT flno , distance FROM Flight ORDER BY price DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow the flight number of flights with three lowest distances.\n\nQuestion hint:\nSELECT flno FROM Flight ORDER BY distance ASC\n\nThe incomplete SQL query:\nSELECT flno FROM Flight ORDER BY distance ASC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the numbers of the shortest flights?\n\nQuestion hint:\nSELECT flno\n\nThe incomplete SQL query:\nSELECT flno\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the average distance and average price for flights from Los Angeles.\n\nQuestion hint:\nSELECT avg(distance) , avg(price)\n\nThe incomplete SQL query:\nSELECT avg(distance) , avg(price)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(distance) , avg(price) FROM Flight WHERE origin = \"Los Angeles\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the average distance and price for all flights from LA?\n\nQuestion hint:\nSELECT avg(distance) , avg(price) FROM Flight\n\nThe incomplete SQL query:\nSELECT avg(distance) , avg(price) FROM Flight\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(distance) , avg(price) FROM Flight WHERE origin = \"Los Angeles\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow all origins and the number of flights from each origin.\n\nQuestion hint:\nSELECT origin , count(*)\n\nThe incomplete SQL query:\nSELECT origin , count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT origin , count(*) FROM Flight GROUP BY origin;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nFor each origin, how many flights came from there?\n\nQuestion hint:\nSELECT origin , count(*)\n\nThe incomplete SQL query:\nSELECT origin , count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT origin , count(*) FROM Flight GROUP BY origin;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow all destinations and the number of flights to each destination.\n\nQuestion hint:\nSELECT destination , count(*) FROM Flight\n\nThe incomplete SQL query:\nSELECT destination , count(*) FROM Flight\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT destination , count(*) FROM Flight GROUP BY destination;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the destinations and number of flights to each one?\n\nQuestion hint:\nSELECT destination , count(*) FROM Flight\n\nThe incomplete SQL query:\nSELECT destination , count(*) FROM Flight\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT destination , count(*) FROM Flight GROUP BY destination;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhich origin has most number of flights?\n\nQuestion hint:\nSELECT origin FROM Flight\n\nThe incomplete SQL query:\nSELECT origin FROM Flight\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat place has the most flights coming from there?\n\nQuestion hint:\nSELECT origin FROM Flight\n\nThe incomplete SQL query:\nSELECT origin FROM Flight\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhich destination has least number of flights?\n\nQuestion hint:\nSELECT destination FROM Flight GROUP BY destination\n\nThe incomplete SQL query:\nSELECT destination FROM Flight GROUP BY destination\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat destination has the fewest number of flights?\n\nQuestion hint:\nSELECT destination\n\nThe incomplete SQL query:\nSELECT destination\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the aircraft name for the flight with number 99\n\nQuestion hint:\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid\n\nThe incomplete SQL query:\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the name of the aircraft that was on flight number 99?\n\nQuestion hint:\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid\n\nThe incomplete SQL query:\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow all flight numbers with aircraft Airbus A340-300.\n\nQuestion hint:\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid\n\nThe incomplete SQL query:\nSELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = \"Airbus A340-300\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the flight numbers for the aircraft Airbus A340-300?\n\nQuestion hint:\nSELECT T1.flno\n\nThe incomplete SQL query:\nSELECT T1.flno\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = \"Airbus A340-300\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow aircraft names and number of flights for each aircraft.\n\nQuestion hint:\nSELECT T2.name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid\n\nThe incomplete SQL query:\nSELECT T2.name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the name of each aircraft and how many flights does each one complete?\n\nQuestion hint:\nSELECT T2.name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid\n\nThe incomplete SQL query:\nSELECT T2.name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow names for all aircraft with at least two flights.\n\nQuestion hint:\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid\n\nThe incomplete SQL query:\nSELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count(*) >= 2;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the names for all aircrafts with at least 2 flights?\n\nQuestion hint:\nSELECT T2.name\n\nThe incomplete SQL query:\nSELECT T2.name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING count(*) >= 2;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nHow many employees have certificate.\n\nQuestion hint:\nSELECT count(DISTINCT eid)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT eid)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT eid) FROM Certificate;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the count of distinct employees with certificates?\n\nQuestion hint:\nSELECT count(DISTINCT eid)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT eid)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT eid) FROM Certificate;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow ids for all employees who don't have a certificate.\n\nQuestion hint:\nSELECT eid FROM Employee EXCEPT\n\nThe incomplete SQL query:\nSELECT eid FROM Employee EXCEPT\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the ids of all employees that don't have certificates?\n\nQuestion hint:\nSELECT eid\n\nThe incomplete SQL query:\nSELECT eid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow names for all aircrafts of which John Williams has certificates.\n\nQuestion hint:\nSELECT T3.name\n\nThe incomplete SQL query:\nSELECT T3.name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = \"John Williams\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the names of all aircrafts that John Williams have certificates to be able to fly?\n\nQuestion hint:\nSELECT T3.name\n\nThe incomplete SQL query:\nSELECT T3.name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = \"John Williams\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow names for all employees who have certificate of Boeing 737-800.\n\nQuestion hint:\nSELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid\n\nThe incomplete SQL query:\nSELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the names of all employees who have a certificate to fly Boeing 737-800?\n\nQuestion hint:\nSELECT T1.name\n\nThe incomplete SQL query:\nSELECT T1.name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.\n\nQuestion hint:\nSELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name\n\nThe incomplete SQL query:\nSELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Airbus A340-300\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?\n\nQuestion hint:\nSELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid\n\nThe incomplete SQL query:\nSELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Airbus A340-300\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow names for all employees who do not have certificate of Boeing 737-800.\n\nQuestion hint:\nSELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid\n\nThe incomplete SQL query:\nSELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the names of all employees who are not certified to fly Boeing 737-800s?\n\nQuestion hint:\nSELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid\n\nThe incomplete SQL query:\nSELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = \"Boeing 737-800\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow the name of aircraft which fewest people have its certificate.\n\nQuestion hint:\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY count(*) DESC\n\nThe incomplete SQL query:\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY count(*) DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat are the names of the aircraft that the least people are certified to fly?\n\nQuestion hint:\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid\n\nThe incomplete SQL query:\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nShow the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.\n\nQuestion hint:\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000\n\nThe incomplete SQL query:\nSELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY count(*) >= 5;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?\n\nQuestion hint:\nSELECT T2.name\n\nThe incomplete SQL query:\nSELECT T2.name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY count(*) >= 5;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nwhat is the salary and name of the employee who has the most number of aircraft certificates?\n\nQuestion hint:\nSELECT T1.name , T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count(*) DESC\n\nThe incomplete SQL query:\nSELECT T1.name , T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count(*) DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the salaray and name of the employee that is certified to fly the most planes?\n\nQuestion hint:\nSELECT T1.name , T1.salary\n\nThe incomplete SQL query:\nSELECT T1.name , T1.salary\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?\n\nQuestion hint:\nSELECT T1.name\n\nThe incomplete SQL query:\nSELECT T1.name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE flight (flno NUMBER, origin TEXT, destination TEXT, distance NUMBER, departure_date TIME, arrival_date TIME, price NUMBER, aid NUMBER, PRIMARY KEY(flno, origin, destination, distance, departure_date, arrival_date, price, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid)); CREATE TABLE aircraft (aid NUMBER, name TEXT, distance NUMBER, PRIMARY KEY(aid, name, distance)); CREATE TABLE employee (eid NUMBER, name TEXT, salary NUMBER, PRIMARY KEY(eid, name, salary)); CREATE TABLE certificate (eid NUMBER, aid NUMBER, PRIMARY KEY(eid, aid), FOREIGN KEY (aid) REFERENCES aircraft(aid), FOREIGN KEY (eid) REFERENCES employee(eid));\n\nSample rows of each table:\nflight: [(99, 'Los Angeles', 'Washington D.C.', 2308, '04/12/2005 09:30', '04/12/2005 09:40', 235.98, 1), (13, 'Los Angeles', 'Chicago', 1749, '04/12/2005 08:45', '04/12/2005 08:45', 220.98, 3), (346, 'Los Angeles', 'Dallas', 1251, '04/12/2005 11:50', '04/12/2005 07:05', 182, 2)]\naircraft: [(1, 'Boeing 747-400', 8430), (2, 'Boeing 737-800', 3383), (3, 'Airbus A340-300', 7120)]\nemployee: [(242518965, 'James Smith', 120433), (141582651, 'Mary Johnson', 178345), (11564812, 'John Williams', 153972)]\ncertificate: [(11564812, 2), (11564812, 10), (90873519, 6)]\n\nQuestion:\nWhat is the salaray and name of the employee with the most certificates to fly planes more than 5000?\n\nQuestion hint:\nSELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000\n\nThe incomplete SQL query:\nSELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many allergies are there?\n\nQuestion hint:\nSELECT count(DISTINCT allergy)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT allergy)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT allergy) FROM Allergy_type;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many allergy entries are there?\n\nQuestion hint:\nSELECT count(DISTINCT allergy)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT allergy)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT allergy) FROM Allergy_type;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many different allergy types exist?\n\nQuestion hint:\nSELECT count(DISTINCT allergytype)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT allergytype)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT allergytype) FROM Allergy_type;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many distinct allergies are there?\n\nQuestion hint:\nSELECT count(DISTINCT allergytype)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT allergytype)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT allergytype) FROM Allergy_type;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow all allergy types.\n\nQuestion hint:\nSELECT DISTINCT allergytype\n\nThe incomplete SQL query:\nSELECT DISTINCT allergytype\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT allergytype FROM Allergy_type;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the different allergy types?\n\nQuestion hint:\nSELECT DISTINCT allergytype\n\nThe incomplete SQL query:\nSELECT DISTINCT allergytype\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT allergytype FROM Allergy_type;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow all allergies and their types.\n\nQuestion hint:\nSELECT allergy , allergytype\n\nThe incomplete SQL query:\nSELECT allergy , allergytype\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT allergy , allergytype FROM Allergy_type;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the allergies and their types?\n\nQuestion hint:\nSELECT allergy , allergytype\n\nThe incomplete SQL query:\nSELECT allergy , allergytype\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT allergy , allergytype FROM Allergy_type;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow all allergies with type food.\n\nQuestion hint:\nSELECT DISTINCT allergy FROM Allergy_type\n\nThe incomplete SQL query:\nSELECT DISTINCT allergy FROM Allergy_type\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = \"food\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are all the different food allergies?\n\nQuestion hint:\nSELECT DISTINCT allergy\n\nThe incomplete SQL query:\nSELECT DISTINCT allergy\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = \"food\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat is the type of allergy Cat?\n\nQuestion hint:\nSELECT allergytype\n\nThe incomplete SQL query:\nSELECT allergytype\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT allergytype FROM Allergy_type WHERE allergy = \"Cat\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat is allergy type of a cat allergy?\n\nQuestion hint:\nSELECT allergytype\n\nThe incomplete SQL query:\nSELECT allergytype\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT allergytype FROM Allergy_type WHERE allergy = \"Cat\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many allergies have type animal?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Allergy_type WHERE allergytype = \"animal\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many animal type allergies exist?\n\nQuestion hint:\nSELECT count(*) FROM Allergy_type\n\nThe incomplete SQL query:\nSELECT count(*) FROM Allergy_type\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Allergy_type WHERE allergytype = \"animal\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow all allergy types and the number of allergies in each type.\n\nQuestion hint:\nSELECT allergytype , count(*) FROM Allergy_type\n\nThe incomplete SQL query:\nSELECT allergytype , count(*) FROM Allergy_type\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT allergytype , count(*) FROM Allergy_type GROUP BY allergytype;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the allergy types and how many allergies correspond to each one?\n\nQuestion hint:\nSELECT allergytype , count(*)\n\nThe incomplete SQL query:\nSELECT allergytype , count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT allergytype , count(*) FROM Allergy_type GROUP BY allergytype;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhich allergy type has most number of allergies?\n\nQuestion hint:\nSELECT allergytype\n\nThe incomplete SQL query:\nSELECT allergytype\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhich allergy type is most common?\n\nQuestion hint:\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC\n\nThe incomplete SQL query:\nSELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhich allergy type has least number of allergies?\n\nQuestion hint:\nSELECT allergytype\n\nThe incomplete SQL query:\nSELECT allergytype\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhich allergy type is the least common?\n\nQuestion hint:\nSELECT allergytype FROM Allergy_type GROUP BY allergytype\n\nThe incomplete SQL query:\nSELECT allergytype FROM Allergy_type GROUP BY allergytype\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many students are there?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Student;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat is the total number of students?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Student;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow first name and last name for all students.\n\nQuestion hint:\nSELECT Fname , Lname\n\nThe incomplete SQL query:\nSELECT Fname , Lname\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Fname , Lname FROM Student;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the full names of all students\n\nQuestion hint:\nSELECT Fname , Lname\n\nThe incomplete SQL query:\nSELECT Fname , Lname\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Fname , Lname FROM Student;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many different advisors are listed?\n\nQuestion hint:\nSELECT count(DISTINCT advisor)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT advisor)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT advisor) FROM Student;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many advisors are there?\n\nQuestion hint:\nSELECT count(DISTINCT advisor)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT advisor)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT advisor) FROM Student;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow all majors.\n\nQuestion hint:\nSELECT DISTINCT Major\n\nThe incomplete SQL query:\nSELECT DISTINCT Major\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT Major FROM Student;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the different majors?\n\nQuestion hint:\nSELECT DISTINCT Major\n\nThe incomplete SQL query:\nSELECT DISTINCT Major\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT Major FROM Student;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow all cities where students live.\n\nQuestion hint:\nSELECT DISTINCT city_code\n\nThe incomplete SQL query:\nSELECT DISTINCT city_code\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT city_code FROM Student;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat cities do students live in?\n\nQuestion hint:\nSELECT DISTINCT city_code\n\nThe incomplete SQL query:\nSELECT DISTINCT city_code\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT city_code FROM Student;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow first name, last name, age for all female students. Their sex is F.\n\nQuestion hint:\nSELECT Fname , Lname , Age\n\nThe incomplete SQL query:\nSELECT Fname , Lname , Age\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Fname , Lname , Age FROM Student WHERE Sex = 'F';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the full names and ages for all female students whose sex is F?\n\nQuestion hint:\nSELECT Fname , Lname , Age\n\nThe incomplete SQL query:\nSELECT Fname , Lname , Age\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Fname , Lname , Age FROM Student WHERE Sex = 'F';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow student ids for all male students.\n\nQuestion hint:\nSELECT StuID\n\nThe incomplete SQL query:\nSELECT StuID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT StuID FROM Student WHERE Sex = 'M';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the student ids for all male students?\n\nQuestion hint:\nSELECT StuID FROM Student\n\nThe incomplete SQL query:\nSELECT StuID FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT StuID FROM Student WHERE Sex = 'M';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many students are age 18?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Student WHERE age = 18;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many students are 18 years old?\n\nQuestion hint:\nSELECT count(*) FROM Student\n\nThe incomplete SQL query:\nSELECT count(*) FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Student WHERE age = 18;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow all student ids who are older than 20.\n\nQuestion hint:\nSELECT StuID FROM Student\n\nThe incomplete SQL query:\nSELECT StuID FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT StuID FROM Student WHERE age > 20;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the student ids for students over 20 years old?\n\nQuestion hint:\nSELECT StuID\n\nThe incomplete SQL query:\nSELECT StuID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT StuID FROM Student WHERE age > 20;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhich city does the student whose last name is \"Kim\" live in?\n\nQuestion hint:\nSELECT city_code FROM Student\n\nThe incomplete SQL query:\nSELECT city_code FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT city_code FROM Student WHERE LName = \"Kim\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nGive the city that the student whose family name is Kim lives in.\n\nQuestion hint:\nSELECT city_code\n\nThe incomplete SQL query:\nSELECT city_code\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT city_code FROM Student WHERE LName = \"Kim\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWho is the advisor of student with ID 1004?\n\nQuestion hint:\nSELECT Advisor FROM Student\n\nThe incomplete SQL query:\nSELECT Advisor FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Advisor FROM Student WHERE StuID = 1004;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWho advises student 1004?\n\nQuestion hint:\nSELECT Advisor\n\nThe incomplete SQL query:\nSELECT Advisor\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Advisor FROM Student WHERE StuID = 1004;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many students live in HKG or CHI?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Student WHERE city_code = \"HKG\" OR city_code = \"CHI\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nGive the number of students living in either HKG or CHI.\n\nQuestion hint:\nSELECT count(*) FROM Student\n\nThe incomplete SQL query:\nSELECT count(*) FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Student WHERE city_code = \"HKG\" OR city_code = \"CHI\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow the minimum, average, and maximum age of all students.\n\nQuestion hint:\nSELECT min(age) , avg(age) , max(age)\n\nThe incomplete SQL query:\nSELECT min(age) , avg(age) , max(age)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT min(age) , avg(age) , max(age) FROM Student;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat is the minimum, mean, and maximum age across all students?\n\nQuestion hint:\nSELECT min(age) , avg(age) , max(age)\n\nThe incomplete SQL query:\nSELECT min(age) , avg(age) , max(age)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT min(age) , avg(age) , max(age) FROM Student;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat is the last name of the youngest student?\n\nQuestion hint:\nSELECT LName FROM Student\n\nThe incomplete SQL query:\nSELECT LName FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT LName FROM Student WHERE age = (SELECT min(age) FROM Student);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nProvide the last name of the youngest student.\n\nQuestion hint:\nSELECT LName FROM Student WHERE age = (SELECT min(age)\n\nThe incomplete SQL query:\nSELECT LName FROM Student WHERE age = (SELECT min(age)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT LName FROM Student WHERE age = (SELECT min(age) FROM Student);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow the student id of the oldest student.\n\nQuestion hint:\nSELECT StuID FROM Student\n\nThe incomplete SQL query:\nSELECT StuID FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT StuID FROM Student WHERE age = (SELECT max(age) FROM Student);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat student id corresponds to the oldest student?\n\nQuestion hint:\nSELECT StuID FROM Student WHERE age = (SELECT max(age)\n\nThe incomplete SQL query:\nSELECT StuID FROM Student WHERE age = (SELECT max(age)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT StuID FROM Student WHERE age = (SELECT max(age) FROM Student);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow all majors and corresponding number of students.\n\nQuestion hint:\nSELECT major , count(*) FROM Student\n\nThe incomplete SQL query:\nSELECT major , count(*) FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT major , count(*) FROM Student GROUP BY major;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many students are there for each major?\n\nQuestion hint:\nSELECT major , count(*) FROM Student\n\nThe incomplete SQL query:\nSELECT major , count(*) FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT major , count(*) FROM Student GROUP BY major;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhich major has most number of students?\n\nQuestion hint:\nSELECT major\n\nThe incomplete SQL query:\nSELECT major\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat is the largest major?\n\nQuestion hint:\nSELECT major FROM Student GROUP BY major\n\nThe incomplete SQL query:\nSELECT major FROM Student GROUP BY major\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow all ages and corresponding number of students.\n\nQuestion hint:\nSELECT age , count(*) FROM Student\n\nThe incomplete SQL query:\nSELECT age , count(*) FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT age , count(*) FROM Student GROUP BY age;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow old is each student and how many students are each age?\n\nQuestion hint:\nSELECT age , count(*)\n\nThe incomplete SQL query:\nSELECT age , count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT age , count(*) FROM Student GROUP BY age;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow the average age for male and female students.\n\nQuestion hint:\nSELECT avg(age) , sex\n\nThe incomplete SQL query:\nSELECT avg(age) , sex\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(age) , sex FROM Student GROUP BY sex;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the average ages for male and female students?\n\nQuestion hint:\nSELECT avg(age) , sex\n\nThe incomplete SQL query:\nSELECT avg(age) , sex\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(age) , sex FROM Student GROUP BY sex;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow all cities and corresponding number of students.\n\nQuestion hint:\nSELECT city_code , count(*)\n\nThe incomplete SQL query:\nSELECT city_code , count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT city_code , count(*) FROM Student GROUP BY city_code;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many students live in each city?\n\nQuestion hint:\nSELECT city_code , count(*)\n\nThe incomplete SQL query:\nSELECT city_code , count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT city_code , count(*) FROM Student GROUP BY city_code;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow all advisors and corresponding number of students.\n\nQuestion hint:\nSELECT advisor , count(*)\n\nThe incomplete SQL query:\nSELECT advisor , count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT advisor , count(*) FROM Student GROUP BY advisor;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many students does each advisor have?\n\nQuestion hint:\nSELECT advisor , count(*) FROM Student\n\nThe incomplete SQL query:\nSELECT advisor , count(*) FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT advisor , count(*) FROM Student GROUP BY advisor;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhich advisor has most number of students?\n\nQuestion hint:\nSELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC\n\nThe incomplete SQL query:\nSELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nGive the advisor with the most students.\n\nQuestion hint:\nSELECT advisor FROM Student\n\nThe incomplete SQL query:\nSELECT advisor FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many students have cat allergies?\n\nQuestion hint:\nSELECT count(*) FROM Has_allergy\n\nThe incomplete SQL query:\nSELECT count(*) FROM Has_allergy\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Has_allergy WHERE Allergy = \"Cat\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many students are affected by cat allergies?\n\nQuestion hint:\nSELECT count(*) FROM Has_allergy\n\nThe incomplete SQL query:\nSELECT count(*) FROM Has_allergy\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Has_allergy WHERE Allergy = \"Cat\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow all student IDs who have at least two allergies.\n\nQuestion hint:\nSELECT StuID\n\nThe incomplete SQL query:\nSELECT StuID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*) >= 2;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the students ids of students who have more than one allergy?\n\nQuestion hint:\nSELECT StuID FROM Has_allergy GROUP BY StuID\n\nThe incomplete SQL query:\nSELECT StuID FROM Has_allergy GROUP BY StuID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*) >= 2;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the student ids of students who don't have any allergies?\n\nQuestion hint:\nSELECT StuID FROM Student EXCEPT SELECT StuID\n\nThe incomplete SQL query:\nSELECT StuID FROM Student EXCEPT SELECT StuID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhich students are unaffected by allergies?\n\nQuestion hint:\nSELECT StuID FROM Student EXCEPT\n\nThe incomplete SQL query:\nSELECT StuID FROM Student EXCEPT\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many female students have milk or egg allergies?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = \"F\" AND T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many students who are female are allergic to milk or eggs?\n\nQuestion hint:\nSELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID\n\nThe incomplete SQL query:\nSELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = \"F\" AND T1.allergy = \"Milk\" OR T1.allergy = \"Eggs\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many students have a food allergy?\n\nQuestion hint:\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy\n\nThe incomplete SQL query:\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = \"food\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many students are affected by food related allergies?\n\nQuestion hint:\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy\n\nThe incomplete SQL query:\nSELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = \"food\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhich allergy has most number of students affected?\n\nQuestion hint:\nSELECT Allergy FROM Has_allergy\n\nThe incomplete SQL query:\nSELECT Allergy FROM Has_allergy\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhich allergy is the most common?\n\nQuestion hint:\nSELECT Allergy\n\nThe incomplete SQL query:\nSELECT Allergy\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow all allergies with number of students affected.\n\nQuestion hint:\nSELECT Allergy , count(*)\n\nThe incomplete SQL query:\nSELECT Allergy , count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many students have each different allergy?\n\nQuestion hint:\nSELECT Allergy , count(*) FROM Has_allergy\n\nThe incomplete SQL query:\nSELECT Allergy , count(*) FROM Has_allergy\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nShow all allergy type with number of students affected.\n\nQuestion hint:\nSELECT T2.allergytype , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy\n\nThe incomplete SQL query:\nSELECT T2.allergytype , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.allergytype , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many students are affected by each allergy type?\n\nQuestion hint:\nSELECT T2.allergytype , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy\n\nThe incomplete SQL query:\nSELECT T2.allergytype , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.allergytype , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nFind the last name and age of the student who has allergy to both milk and cat.\n\nQuestion hint:\nSELECT lname , age FROM Student WHERE StuID IN (SELECT StuID\n\nThe incomplete SQL query:\nSELECT lname , age FROM Student WHERE StuID IN (SELECT StuID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT lname , age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\");",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the last names and ages of the students who are allergic to milk and cat?\n\nQuestion hint:\nSELECT lname , age\n\nThe incomplete SQL query:\nSELECT lname , age\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT lname , age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\");",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.\n\nQuestion hint:\nSELECT T1.Allergy , T1.AllergyType\n\nThe incomplete SQL query:\nSELECT T1.Allergy , T1.AllergyType\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" ORDER BY T1.Allergy;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.\n\nQuestion hint:\nSELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID\n\nThe incomplete SQL query:\nSELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Allergy , T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" ORDER BY T1.Allergy;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nFind the first name and gender of the student who has allergy to milk but not cat.\n\nQuestion hint:\nSELECT fname , sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\"\n\nThe incomplete SQL query:\nSELECT fname , sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\"\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT fname , sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\");",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the first name and gender of the students who have allergy to milk but can put up with cats?\n\nQuestion hint:\nSELECT fname , sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy\n\nThe incomplete SQL query:\nSELECT fname , sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT fname , sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\");",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nFind the average age of the students who have allergies with food and animal types.\n\nQuestion hint:\nSELECT avg(age) FROM Student\n\nThe incomplete SQL query:\nSELECT avg(age) FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"animal\");",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow old are the students with allergies to food and animal types on average?\n\nQuestion hint:\nSELECT avg(age) FROM Student WHERE StuID IN (\n\nThe incomplete SQL query:\nSELECT avg(age) FROM Student WHERE StuID IN (\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"animal\");",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nList the first and last name of the students who do not have any food type allergy.\n\nQuestion hint:\nSELECT fname , lname FROM Student\n\nThe incomplete SQL query:\nSELECT fname , lname FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT fname , lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\");",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat is the full name of each student who is not allergic to any type of food.\n\nQuestion hint:\nSELECT fname , lname FROM Student\n\nThe incomplete SQL query:\nSELECT fname , lname FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT fname , lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\");",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nFind the number of male (sex is 'M') students who have some food type allery.\n\nQuestion hint:\nSELECT count(*) FROM Student\n\nThe incomplete SQL query:\nSELECT count(*) FROM Student\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Student WHERE sex = \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\");",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nHow many male students (sex is 'M') are allergic to any type of food?\n\nQuestion hint:\nSELECT count(*) FROM Student WHERE sex = \"M\" AND StuID IN (SELECT StuID\n\nThe incomplete SQL query:\nSELECT count(*) FROM Student WHERE sex = \"M\" AND StuID IN (SELECT StuID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Student WHERE sex = \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\");",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nFind the different first names and cities of the students who have allergy to milk or cat.\n\nQuestion hint:\nSELECT DISTINCT T1.fname , T1.city_code\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.fname , T1.city_code\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.fname , T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = \"Milk\" OR T2.Allergy = \"Cat\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nWhat are the distinct first names and cities of the students who have allergy either to milk or to cat?\n\nQuestion hint:\nSELECT DISTINCT T1.fname , T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.fname , T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.fname , T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = \"Milk\" OR T2.Allergy = \"Cat\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Allergy_Type (Allergy TEXT, AllergyType TEXT, PRIMARY KEY(Allergy, AllergyType)); CREATE TABLE Has_Allergy (StuID NUMBER, Allergy TEXT, PRIMARY KEY(StuID, Allergy), FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy), FOREIGN KEY (StuID) REFERENCES Student(StuID)); CREATE TABLE Student (StuID NUMBER, LName TEXT, Fname TEXT, Age NUMBER, Sex TEXT, Major NUMBER, Advisor NUMBER, city_code TEXT, PRIMARY KEY(StuID, LName, Fname, Age, Sex, Major, Advisor, city_code));\n\nSample rows of each table:\nAllergy_Type: [('Eggs', 'food'), ('Nuts', 'food'), ('Milk', 'food')]\nHas_Allergy: [(1001, 'Cat'), (1002, 'Shellfish'), (1002, 'Tree Pollen')]\nStudent: [(1001, 'Smith', 'Linda', 18, 'F', 600, 1121, 'BAL'), (1002, 'Kim', 'Tracy', 19, 'F', 600, 7712, 'HKG'), (1003, 'Jones', 'Shiela', 21, 'F', 600, 7792, 'WAS')]\n\nQuestion:\nFind the number of students who are older than 18 and do not have allergy to either food or animal.\n\nQuestion hint:\nSELECT count(*) FROM Student WHERE age > 18 AND StuID NOT IN (\n\nThe incomplete SQL query:\nSELECT count(*) FROM Student WHERE age > 18 AND StuID NOT IN (\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM Student WHERE age > 18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\" OR T2.allergytype = \"animal\");",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    }
]