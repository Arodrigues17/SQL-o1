[
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nHow many heads of the departments are older than 56 ?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM head WHERE age > 56;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nList the name, born state and age of the heads of departments ordered by age.\n\nQuestion hint:\nSELECT name , born_state , age FROM head\n\nThe incomplete SQL query:\nSELECT name , born_state , age FROM head\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name , born_state , age FROM head ORDER BY age;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nList the creation year, name and budget of each department.\n\nQuestion hint:\nSELECT creation , name , budget_in_billions\n\nThe incomplete SQL query:\nSELECT creation , name , budget_in_billions\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT creation , name , budget_in_billions FROM department;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhat are the maximum and minimum budget of the departments?\n\nQuestion hint:\nSELECT max(budget_in_billions) , min(budget_in_billions)\n\nThe incomplete SQL query:\nSELECT max(budget_in_billions) , min(budget_in_billions)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(budget_in_billions) , min(budget_in_billions) FROM department;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhat is the average number of employees of the departments whose rank is between 10 and 15?\n\nQuestion hint:\nSELECT avg(num_employees)\n\nThe incomplete SQL query:\nSELECT avg(num_employees)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhat are the names of the heads who are born outside the California state?\n\nQuestion hint:\nSELECT name FROM head\n\nThe incomplete SQL query:\nSELECT name FROM head\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT name FROM head WHERE born_state != 'California';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhat are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?\n\nQuestion hint:\nSELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhat are the names of the states where at least 3 heads were born?\n\nQuestion hint:\nSELECT born_state FROM head\n\nThe incomplete SQL query:\nSELECT born_state FROM head\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT born_state FROM head GROUP BY born_state HAVING count(*) >= 3;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nIn which year were most departments established?\n\nQuestion hint:\nSELECT creation\n\nThe incomplete SQL query:\nSELECT creation\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nShow the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?\n\nQuestion hint:\nSELECT T1.name , T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id\n\nThe incomplete SQL query:\nSELECT T1.name , T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.name , T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nHow many acting statuses are there?\n\nQuestion hint:\nSELECT count(DISTINCT temporary_acting)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT temporary_acting)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT temporary_acting) FROM management;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nHow many departments are led by heads who are not mentioned?\n\nQuestion hint:\nSELECT count(*) FROM department\n\nThe incomplete SQL query:\nSELECT count(*) FROM department\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhat are the distinct ages of the heads who are acting?\n\nQuestion hint:\nSELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nList the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.\n\nQuestion hint:\nSELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury'\n\nThe incomplete SQL query:\nSELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury'\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhich department has more than 1 head at a time? List the id, name and the number of heads.\n\nQuestion hint:\nSELECT T1.department_id , T1.name , count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id\n\nThe incomplete SQL query:\nSELECT T1.department_id , T1.name , count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.department_id , T1.name , count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING count(*) > 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE department (Department_ID NUMBER, Name TEXT, Creation TEXT, Ranking NUMBER, Budget_in_Billions NUMBER, Num_Employees NUMBER, PRIMARY KEY(Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees)); CREATE TABLE head (head_ID NUMBER, name TEXT, born_state TEXT, age NUMBER, PRIMARY KEY(head_ID, name, born_state, age)); CREATE TABLE management (department_ID NUMBER, head_ID NUMBER, temporary_acting TEXT, PRIMARY KEY(department_ID, head_ID, temporary_acting), FOREIGN KEY (head_ID) REFERENCES head(head_ID), FOREIGN KEY (department_ID) REFERENCES department(Department_ID));\n\nSample rows of each table:\ndepartment: [(1, 'State', '1789', 1, 9.96, 30266.0), (2, 'Treasury', '1789', 2, 11.1, 115897.0), (3, 'Defense', '1947', 3, 439.3, 3000000.0)]\nhead: [(1, 'Tiger Woods', 'Alabama', 67.0), (2, 'Sergio García', 'California', 68.0), (3, 'K. J. Choi', 'Alabama', 69.0)]\nmanagement: [(2, 5, 'Yes'), (15, 4, 'Yes'), (2, 6, 'Yes')]\n\nQuestion:\nWhich head's name has the substring 'Ha'? List the id and name.\n\nQuestion hint:\nSELECT head_id , name FROM head\n\nThe incomplete SQL query:\nSELECT head_id , name FROM head\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT head_id , name FROM head WHERE name LIKE '%Ha%';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nHow many farms are there?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM farm;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nCount the number of farms.\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM farm;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nList the total number of horses on farms in ascending order.\n\nQuestion hint:\nSELECT Total_Horses\n\nThe incomplete SQL query:\nSELECT Total_Horses\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat is the total horses record for each farm, sorted ascending?\n\nQuestion hint:\nSELECT Total_Horses\n\nThe incomplete SQL query:\nSELECT Total_Horses\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the hosts of competitions whose theme is not \"Aliens\"?\n\nQuestion hint:\nSELECT Hosts\n\nThe incomplete SQL query:\nSELECT Hosts\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nReturn the hosts of competitions for which the theme is not Aliens?\n\nQuestion hint:\nSELECT Hosts\n\nThe incomplete SQL query:\nSELECT Hosts\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Hosts FROM farm_competition WHERE Theme != 'Aliens';",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the themes of farm competitions sorted by year in ascending order?\n\nQuestion hint:\nSELECT Theme FROM farm_competition\n\nThe incomplete SQL query:\nSELECT Theme FROM farm_competition\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nReturn the themes of farm competitions, sorted by year ascending.\n\nQuestion hint:\nSELECT Theme FROM farm_competition\n\nThe incomplete SQL query:\nSELECT Theme FROM farm_competition\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat is the average number of working horses of farms with more than 5000 total number of horses?\n\nQuestion hint:\nSELECT avg(Working_Horses)\n\nThe incomplete SQL query:\nSELECT avg(Working_Horses)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses > 5000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nGive the average number of working horses on farms with more than 5000 total horses.\n\nQuestion hint:\nSELECT avg(Working_Horses)\n\nThe incomplete SQL query:\nSELECT avg(Working_Horses)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses > 5000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the maximum and minimum number of cows across all farms.\n\nQuestion hint:\nSELECT max(Cows) , min(Cows)\n\nThe incomplete SQL query:\nSELECT max(Cows) , min(Cows)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(Cows) , min(Cows) FROM farm;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nReturn the maximum and minimum number of cows across all farms.\n\nQuestion hint:\nSELECT max(Cows) , min(Cows)\n\nThe incomplete SQL query:\nSELECT max(Cows) , min(Cows)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT max(Cows) , min(Cows) FROM farm;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nHow many different statuses do cities have?\n\nQuestion hint:\nSELECT count(DISTINCT Status)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT Status)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT Status) FROM city;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nCount the number of different statuses.\n\nQuestion hint:\nSELECT count(DISTINCT Status)\n\nThe incomplete SQL query:\nSELECT count(DISTINCT Status)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(DISTINCT Status) FROM city;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nList official names of cities in descending order of population.\n\nQuestion hint:\nSELECT Official_Name FROM city\n\nThe incomplete SQL query:\nSELECT Official_Name FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name FROM city ORDER BY Population DESC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the official names of cities, ordered descending by population?\n\nQuestion hint:\nSELECT Official_Name\n\nThe incomplete SQL query:\nSELECT Official_Name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name FROM city ORDER BY Population DESC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nList the official name and status of the city with the largest population.\n\nQuestion hint:\nSELECT Official_Name , Status FROM city ORDER BY Population DESC\n\nThe incomplete SQL query:\nSELECT Official_Name , Status FROM city ORDER BY Population DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat is the official name and status of the city with the most residents?\n\nQuestion hint:\nSELECT Official_Name , Status FROM city ORDER BY Population DESC\n\nThe incomplete SQL query:\nSELECT Official_Name , Status FROM city ORDER BY Population DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name , Status FROM city ORDER BY Population DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nShow the years and the official names of the host cities of competitions.\n\nQuestion hint:\nSELECT T2.Year , T1.Official_Name\n\nThe incomplete SQL query:\nSELECT T2.Year , T1.Official_Name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nGive the years and official names of the cities of each competition.\n\nQuestion hint:\nSELECT T2.Year , T1.Official_Name\n\nThe incomplete SQL query:\nSELECT T2.Year , T1.Official_Name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Year , T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nShow the official names of the cities that have hosted more than one competition.\n\nQuestion hint:\nSELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID\n\nThe incomplete SQL query:\nSELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the official names of cities that have hosted more than one competition?\n\nQuestion hint:\nSELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nThe incomplete SQL query:\nSELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nShow the status of the city that has hosted the greatest number of competitions.\n\nQuestion hint:\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nThe incomplete SQL query:\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat is the status of the city that has hosted the most competitions?\n\nQuestion hint:\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nThe incomplete SQL query:\nSELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nPlease show the themes of competitions with host cities having populations larger than 1000.\n\nQuestion hint:\nSELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nThe incomplete SQL query:\nSELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the themes of competitions that have corresponding host cities with more than 1000 residents?\n\nQuestion hint:\nSELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nThe incomplete SQL query:\nSELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nPlease show the different statuses of cities and the average population of cities with each status.\n\nQuestion hint:\nSELECT Status , avg(Population) FROM city\n\nThe incomplete SQL query:\nSELECT Status , avg(Population) FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status , avg(Population) FROM city GROUP BY Status;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the statuses and average populations of each city?\n\nQuestion hint:\nSELECT Status , avg(Population)\n\nThe incomplete SQL query:\nSELECT Status , avg(Population)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status , avg(Population) FROM city GROUP BY Status;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nPlease show the different statuses, ordered by the number of cities that have each.\n\nQuestion hint:\nSELECT Status\n\nThe incomplete SQL query:\nSELECT Status\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nReturn the different statuses of cities, ascending by frequency.\n\nQuestion hint:\nSELECT Status\n\nThe incomplete SQL query:\nSELECT Status\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nList the most common type of Status across cities.\n\nQuestion hint:\nSELECT Status\n\nThe incomplete SQL query:\nSELECT Status\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat is the most common status across all cities?\n\nQuestion hint:\nSELECT Status FROM city\n\nThe incomplete SQL query:\nSELECT Status FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nList the official names of cities that have not held any competition.\n\nQuestion hint:\nSELECT Official_Name FROM city\n\nThe incomplete SQL query:\nSELECT Official_Name FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the official names of cities that have not hosted a farm competition?\n\nQuestion hint:\nSELECT Official_Name FROM city\n\nThe incomplete SQL query:\nSELECT Official_Name FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nShow the status shared by cities with population bigger than 1500 and smaller than 500.\n\nQuestion hint:\nSELECT Status FROM city\n\nThe incomplete SQL query:\nSELECT Status FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhich statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?\n\nQuestion hint:\nSELECT Status FROM city\n\nThe incomplete SQL query:\nSELECT Status FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nFind the official names of cities with population bigger than 1500 or smaller than 500.\n\nQuestion hint:\nSELECT Official_Name FROM city\n\nThe incomplete SQL query:\nSELECT Official_Name FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the official names of cities that have population over 1500 or less than 500?\n\nQuestion hint:\nSELECT Official_Name FROM city\n\nThe incomplete SQL query:\nSELECT Official_Name FROM city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nShow the census ranking of cities whose status are not \"Village\".\n\nQuestion hint:\nSELECT Census_Ranking\n\nThe incomplete SQL query:\nSELECT Census_Ranking\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Census_Ranking FROM city WHERE Status != \"Village\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE city (City_ID NUMBER, Official_Name TEXT, Status TEXT, Area_km_2 NUMBER, Population NUMBER, Census_Ranking TEXT, PRIMARY KEY(City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking)); CREATE TABLE farm (Farm_ID NUMBER, Year NUMBER, Total_Horses NUMBER, Working_Horses NUMBER, Total_Cattle NUMBER, Oxen NUMBER, Bulls NUMBER, Cows NUMBER, Pigs NUMBER, Sheep_and_Goats NUMBER, PRIMARY KEY(Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats)); CREATE TABLE farm_competition (Competition_ID NUMBER, Year NUMBER, Theme TEXT, Host_city_ID NUMBER, Hosts TEXT, PRIMARY KEY(Competition_ID, Year, Theme, Host_city_ID, Hosts), FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)); CREATE TABLE competition_record (Competition_ID NUMBER, Farm_ID NUMBER, Rank NUMBER, PRIMARY KEY(Competition_ID, Farm_ID, Rank), FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID), FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID));\n\nSample rows of each table:\ncity: [(1, 'Grand Falls/Grand-Sault', 'Town', 18.06, 5706.0, '636 of 5008'), (2, 'Perth-Andover', 'Village', 8.89, 1778.0, '1442 of 5,008'), (3, 'Plaster Rock', 'Village', 3.09, 1135.0, '1936 of 5,008')]\nfarm: [(1, 1927, 5056.5, 3900.1, 8374.5, 805.5, 31.6, 3852.1, 4412.4, 7956.3), (2, 1928, 5486.9, 4090.5, 8604.8, 895.3, 32.8, 3987.0, 6962.9, 8112.2), (3, 1929, 5607.5, 4198.8, 7611.0, 593.7, 26.9, 3873.0, 4161.2, 7030.8)]\nfarm_competition: [(1, 2013, 'Carnival M is back!', 1, 'Miley Cyrus Jared Leto and Karen Mok'), (2, 2006, 'Codehunters', 2, 'Leehom Wang and Kelly Rowland'), (3, 2005, 'MTV Asia Aid', 3, 'Alicia Keys')]\ncompetition_record: [(1, 8, 1), (1, 2, 2), (1, 3, 3)]\n\nQuestion:\nWhat are the census rankings of cities that do not have the status \"Village\"?\n\nQuestion hint:\nSELECT Census_Ranking\n\nThe incomplete SQL query:\nSELECT Census_Ranking\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT Census_Ranking FROM city WHERE Status != \"Village\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nwhich course has most number of registered students?\n\nQuestion hint:\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id\n\nThe incomplete SQL query:\nSELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat is the name of the course with the most registered students?\n\nQuestion hint:\nSELECT T1.course_name\n\nThe incomplete SQL query:\nSELECT T1.course_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nwhat is id of students who registered some courses but the least number of courses in these students?\n\nQuestion hint:\nSELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*)\n\nThe incomplete SQL query:\nSELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of the students who registered for some courses but had the least number of courses for all students?\n\nQuestion hint:\nSELECT student_id FROM student_course_registrations\n\nThe incomplete SQL query:\nSELECT student_id FROM student_course_registrations\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nwhat are the first name and last name of all candidates?\n\nQuestion hint:\nSELECT T2.first_name , T2.last_name\n\nThe incomplete SQL query:\nSELECT T2.first_name , T2.last_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the first and last names of all the candidates?\n\nQuestion hint:\nSELECT T2.first_name , T2.last_name\n\nThe incomplete SQL query:\nSELECT T2.first_name , T2.last_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.first_name , T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nList the id of students who never attends courses?\n\nQuestion hint:\nSELECT student_id\n\nThe incomplete SQL query:\nSELECT student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the  ids of every student who has never attended a course?\n\nQuestion hint:\nSELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id\n\nThe incomplete SQL query:\nSELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM students WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance);",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nList the id of students who attended some courses?\n\nQuestion hint:\nSELECT student_id\n\nThe incomplete SQL query:\nSELECT student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_attendance;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of all students who have attended at least one course?\n\nQuestion hint:\nSELECT student_id\n\nThe incomplete SQL query:\nSELECT student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_attendance;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of all students for courses and what are the names of those courses?\n\nQuestion hint:\nSELECT T1.student_id , T2.course_name\n\nThe incomplete SQL query:\nSELECT T1.student_id , T2.course_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.student_id , T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat is detail of the student who most recently registered course?\n\nQuestion hint:\nSELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC\n\nThe incomplete SQL query:\nSELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat details do we have on the students who registered for courses most recently?\n\nQuestion hint:\nSELECT T2.student_details\n\nThe incomplete SQL query:\nSELECT T2.student_details\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nHow many students attend course English?\n\nQuestion hint:\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id\n\nThe incomplete SQL query:\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nHow many students are attending English courses?\n\nQuestion hint:\nSELECT count(*)\n\nThe incomplete SQL query:\nSELECT count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nHow many courses do the student whose id is 171 attend?\n\nQuestion hint:\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id\n\nThe incomplete SQL query:\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nHow many courses does the student with id 171 actually attend?\n\nQuestion hint:\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id\n\nThe incomplete SQL query:\nSELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFind id of the candidate whose email is stanley.monahan@example.org?\n\nQuestion hint:\nSELECT T2.candidate_id\n\nThe incomplete SQL query:\nSELECT T2.candidate_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat is the id of the candidate whose email is stanley.monahan@example.org?\n\nQuestion hint:\nSELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id\n\nThe incomplete SQL query:\nSELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFind id of the candidate who most recently accessed the course?\n\nQuestion hint:\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC\n\nThe incomplete SQL query:\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat is the id of the candidate who most recently accessed the course?\n\nQuestion hint:\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC\n\nThe incomplete SQL query:\nSELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat is detail of the student who registered the most number of courses?\n\nQuestion hint:\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC\n\nThe incomplete SQL query:\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the details of the student who registered for the most number of courses?\n\nQuestion hint:\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC\n\nThe incomplete SQL query:\nSELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nList the id of students who registered some courses and the number of their registered courses?\n\nQuestion hint:\nSELECT T1.student_id , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id\n\nThe incomplete SQL query:\nSELECT T1.student_id , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.student_id , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFor every student who is registered for some course, how many courses are they registered for?\n\nQuestion hint:\nSELECT T1.student_id , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id\n\nThe incomplete SQL query:\nSELECT T1.student_id , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T1.student_id , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nHow many registed students do each course have? List course name and the number of their registered students?\n\nQuestion hint:\nSELECT T3.course_name , count(*)\n\nThe incomplete SQL query:\nSELECT T3.course_name , count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFor each course id, how many students are registered and what are the course names?\n\nQuestion hint:\nSELECT T3.course_name , count(*)\n\nThe incomplete SQL query:\nSELECT T3.course_name , count(*)\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFind id of candidates whose assessment code is \"Pass\"?\n\nQuestion hint:\nSELECT candidate_id FROM candidate_assessments\n\nThe incomplete SQL query:\nSELECT candidate_id FROM candidate_assessments\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of the candidates that have an outcome code of Pass?\n\nQuestion hint:\nSELECT candidate_id\n\nThe incomplete SQL query:\nSELECT candidate_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFind the cell mobile number of the candidates whose assessment code is \"Fail\"?\n\nQuestion hint:\nSELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id\n\nThe incomplete SQL query:\nSELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?\n\nQuestion hint:\nSELECT T3.cell_mobile_number\n\nThe incomplete SQL query:\nSELECT T3.cell_mobile_number\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\";",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the id of students who registered course 301?\n\nQuestion hint:\nSELECT student_id FROM student_course_attendance\n\nThe incomplete SQL query:\nSELECT student_id FROM student_course_attendance\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_attendance WHERE course_id = 301;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of the students who registered for course 301?\n\nQuestion hint:\nSELECT student_id FROM student_course_attendance\n\nThe incomplete SQL query:\nSELECT student_id FROM student_course_attendance\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_attendance WHERE course_id = 301;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat is the id of the student who most recently registered course 301?\n\nQuestion hint:\nSELECT student_id\n\nThe incomplete SQL query:\nSELECT student_id\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of the students who registered for course 301 most recently?\n\nQuestion hint:\nSELECT student_id FROM student_course_attendance\n\nThe incomplete SQL query:\nSELECT student_id FROM student_course_attendance\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFind distinct cities of addresses of people?\n\nQuestion hint:\nSELECT DISTINCT T1.city\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the different cities where people live?\n\nQuestion hint:\nSELECT DISTINCT T1.city\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nFind distinct cities of address of students?\n\nQuestion hint:\nSELECT DISTINCT T1.city\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the different cities where students live?\n\nQuestion hint:\nSELECT DISTINCT T1.city\n\nThe incomplete SQL query:\nSELECT DISTINCT T1.city\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nList the names of courses in alphabetical order?\n\nQuestion hint:\nSELECT course_name\n\nThe incomplete SQL query:\nSELECT course_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT course_name FROM courses ORDER BY course_name;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the names of the courses in alphabetical order?\n\nQuestion hint:\nSELECT course_name\n\nThe incomplete SQL query:\nSELECT course_name\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT course_name FROM courses ORDER BY course_name;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nList the first names of people in alphabetical order?\n\nQuestion hint:\nSELECT first_name FROM people\n\nThe incomplete SQL query:\nSELECT first_name FROM people\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name FROM people ORDER BY first_name;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the first names of the people in alphabetical order?\n\nQuestion hint:\nSELECT first_name FROM people\n\nThe incomplete SQL query:\nSELECT first_name FROM people\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT first_name FROM people ORDER BY first_name;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the id of students who registered courses or attended courses?\n\nQuestion hint:\nSELECT student_id FROM student_course_registrations UNION\n\nThe incomplete SQL query:\nSELECT student_id FROM student_course_registrations UNION\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    },
    {
        "input": "Given the following database schema and question, your task is to write a valid SQL query whose execution will accurately answer the question. If the value below the incomplete SQL query is not empty, your task is to complete it into a full SQL query. Remember to end the query with a semicolom ```;```.\n\nDatabase schema:\nCREATE TABLE Addresses (address_id NUMBER, line_1 TEXT, line_2 TEXT, city TEXT, zip_postcode TEXT, state_province_county TEXT, country TEXT, PRIMARY KEY(address_id, line_1, line_2, city, zip_postcode, state_province_county, country)); CREATE TABLE People (person_id NUMBER, first_name TEXT, middle_name TEXT, last_name TEXT, cell_mobile_number TEXT, email_address TEXT, login_name TEXT, password TEXT, PRIMARY KEY(person_id, first_name, middle_name, last_name, cell_mobile_number, email_address, login_name, password)); CREATE TABLE Students (student_id NUMBER, student_details TEXT, PRIMARY KEY(student_id, student_details), FOREIGN KEY (student_id) REFERENCES People(person_id)); CREATE TABLE Courses (course_id TEXT, course_name TEXT, course_description TEXT, other_details TEXT, PRIMARY KEY(course_id, course_name, course_description, other_details)); CREATE TABLE People_Addresses (person_address_id NUMBER, person_id NUMBER, address_id NUMBER, date_from TIME, date_to TIME, PRIMARY KEY(person_address_id, person_id, address_id, date_from, date_to), FOREIGN KEY (address_id) REFERENCES Addresses(address_id), FOREIGN KEY (person_id) REFERENCES People(person_id)); CREATE TABLE Student_Course_Registrations (student_id NUMBER, course_id NUMBER, registration_date TIME, PRIMARY KEY(student_id, course_id, registration_date), FOREIGN KEY (course_id) REFERENCES Courses(course_id), FOREIGN KEY (student_id) REFERENCES Students(student_id)); CREATE TABLE Student_Course_Attendance (student_id NUMBER, course_id NUMBER, date_of_attendance TIME, PRIMARY KEY(student_id, course_id, date_of_attendance), FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id), FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)); CREATE TABLE Candidates (candidate_id NUMBER, candidate_details TEXT, PRIMARY KEY(candidate_id, candidate_details), FOREIGN KEY (candidate_id) REFERENCES People(person_id)); CREATE TABLE Candidate_Assessments (candidate_id NUMBER, qualification TEXT, assessment_date TIME, asessment_outcome_code TEXT, PRIMARY KEY(candidate_id, qualification, assessment_date, asessment_outcome_code), FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id));\n\nSample rows of each table:\nAddresses: [(5, '0900 Roderick Oval\\nNew Albina, WA 19200-7914', 'Suite 096', 'Linnealand', '862', 'Montana', 'USA'), (9, '966 Dach Ports Apt. 322\\nLake Harmonyhaven, VA 65235', 'Apt. 163', 'South Minnie', '716', 'Texas', 'USA'), (29, '28550 Broderick Underpass Suite 667\\nZakaryhaven, WY 22945-1534', 'Apt. 419', 'North Trystanborough', '112', 'Vermont', 'USA')]\nPeople: [(111, 'Shannon', 'Elissa', 'Senger', '01955267735', 'javier.trantow@example.net', 'pgub', '5e4ff49a61b3544da3ad7dc7e2cf28847564c64c'), (121, 'Virginie', 'Jasmin', 'Hartmann', '(508)319-2970x043', 'boyer.lonie@example.com', 'bkkv', 'b063331ea8116befaa7b84c59c6a22200f5f8caa'), (131, 'Dariana', 'Hayley', 'Bednar', '(262)347-9364x516', 'leila14@example.net', 'zops', 'b20b6a9f24aadeda70d54e410c3219f61fb063fb')]\nStudents: [(111, 'Marry'), (121, 'Martin'), (131, 'Barry')]\nCourses: [('301', 'statistics', 'statistics', None), ('302', 'English', 'English', None), ('303', 'French', 'French', None)]\nPeople_Addresses: [(122, 111, 9, '2012-09-26 13:21:00', '2018-03-21 09:46:30'), (257, 121, 5, '2008-07-31 02:17:25', '2018-03-09 02:11:12'), (269, 131, 88, '2008-05-26 20:43:41', '2018-03-11 20:26:41')]\nStudent_Course_Registrations: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2008-10-04 10:35:13'), (121, 303, '2008-11-14 10:35:13')]\nStudent_Course_Attendance: [(111, 301, '2008-11-04 10:35:13'), (121, 301, '2012-04-09 11:44:34'), (121, 303, '2014-04-09 11:44:34')]\nCandidates: [(111, 'Jane'), (121, 'Robert'), (131, 'Alex')]\nCandidate_Assessments: [(111, 'A', '2010-04-07 11:44:34', 'Pass'), (121, 'B', '2010-04-17 11:44:34', 'Pass'), (131, 'D', '2010-04-05 11:44:34', 'Fail')]\n\nQuestion:\nWhat are the ids of the students who either registered or attended a course?\n\nQuestion hint:\nSELECT student_id FROM student_course_registrations\n\nThe incomplete SQL query:\nSELECT student_id FROM student_course_registrations\n\nAnswer the question by a SQL query only with no explanation:\n",
        "target": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance;",
        "result_mcts": [
            [
                0.0,
                ""
            ]
        ],
        "result_mcts_worst": "",
        "result_mcts_best": ""
    }
]